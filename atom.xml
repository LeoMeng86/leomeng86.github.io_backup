<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://leomeng86.github.io</id>
    <title>一梦空间</title>
    <subtitle>路漫漫其修远兮，吾将上下而求索</subtitle>
    <icon>http://leomeng86.github.io/images/favicon.ico</icon>
    <link href="http://leomeng86.github.io" />
    <author>
      <name>Leo Meng</name>
    </author>
    <updated>2022-09-06T04:02:32.000Z</updated>
    <category term="笔记" />
    <category term=" c++" />
    <category term=" c" />
    <category term=" 数据结构" />
    <entry>
        <id>http://leomeng86.github.io/2022/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/</id>
        <title>数据结构第六次上机实验</title>
        <link rel="alternate" href="http://leomeng86.github.io/2022/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
        <content type="html">&lt;h2 id=&#34;第一题稀疏矩阵之差&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一题稀疏矩阵之差&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第一题：稀疏矩阵之差&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;矩阵 A 和 B 都是稀疏矩阵。请计算矩阵的差 A-B. 如果 A、B 不能计算差值，输出”Illegal!”&lt;/p&gt;
&lt;h3 id=&#34;输入格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入格式&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;矩阵的输入采用三元组表示，先 A 后 B。对每个矩阵：&lt;/p&gt;
&lt;p&gt;第 1 行，3 个整数 N、M、t，用空格分隔，分别表示矩阵的行数、列数和非 0 数据项数，10≤N、M≤50000，t≤min (N,M).&lt;/p&gt;
&lt;p&gt;第 2 至 t+1 行，每行 3 个整数 r、c、v，用空格分隔，表示矩阵 r 行 c 列的位置是非 0 数据项 v, v 在 32 位有符号整型范围内。三元组默认按行列排序。&lt;/p&gt;
&lt;h3 id=&#34;输出格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出格式&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;矩阵 A-B，采用三元组表示，默认按行列排序，非零项也在 32 位有符号整型范围内。&lt;/p&gt;
&lt;h3 id=&#34;输入样例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入样例&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出一组输入。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;in&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;10 10 3
2 2 2
5 5 5
10 10 20
10 10 2
2 2 1
6 6 6
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;输出样例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出样例&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出相应的输出。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;out&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;10 10 4
2 2 1
5 5 5
6 6 -6
10 10 20
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;题目解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目解析&#34;&gt;#&lt;/a&gt; &lt;strong&gt;题目解析&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&#34;方法一归并&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法一归并&#34;&gt;#&lt;/a&gt; &lt;strong&gt;方法一：归并&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;注意到题目给出的三元组已经按照行列排序，且输出要求也要求按照行列顺序，这里使用一个归并的方法，如果第一个矩阵的三元组小于第二个的，直接储存第一个，如果相等，输出相减后储存，如果第二个矩阵的三元组位置较小，储存第二个矩阵的相反数。&lt;/p&gt;
&lt;p&gt;里面有一个坑，相减后可能出现 0 的情况，一旦出现结果零，即不储存。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cpp&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;algorithm&amp;gt;using namespace std;
int main()
&amp;#123;
    int CNT;
    vector&amp;lt;pair&amp;lt;pair&amp;lt;int, int&amp;gt;, int&amp;gt;&amp;gt; a, b, c;
    int n, m, cnt;
    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; cnt;
    CNT = cnt;
    while (cnt--)
    &amp;#123;
        int tn, tm, val;
        cin &amp;gt;&amp;gt; tn &amp;gt;&amp;gt; tm &amp;gt;&amp;gt; val;
        auto tmp = pair&amp;lt;int, int&amp;gt;(tn, tm);
        a.push_back(pair&amp;lt;pair&amp;lt;int, int&amp;gt;, int&amp;gt;(tmp, val));
    &amp;#125;
    int n2, m2, cnt2;
    cin &amp;gt;&amp;gt; n2 &amp;gt;&amp;gt; m2 &amp;gt;&amp;gt; cnt2;
    CNT += cnt2;
    if (n2 != n || m != m2)
    &amp;#123;
        cout &amp;lt;&amp;lt; &amp;quot;Illegal!&amp;quot;;
        return 0;
    &amp;#125;
    while (cnt2--)
    &amp;#123;
        int tn, tm, val;
        cin &amp;gt;&amp;gt; tn &amp;gt;&amp;gt; tm &amp;gt;&amp;gt; val;
        auto tmp = pair&amp;lt;int, int&amp;gt;(tn, tm);
        b.push_back(pair&amp;lt;pair&amp;lt;int, int&amp;gt;, int&amp;gt;(tmp, val));
    &amp;#125;
    auto t1 = a.begin();
    auto t2 = b.begin();
    while (t1 != a.end() &amp;amp;&amp;amp; t2 != b.end())
    &amp;#123;
        if (t1-&amp;gt;first.first == t2-&amp;gt;first.first)
        &amp;#123;
            if (t2-&amp;gt;first.second == t1-&amp;gt;first.second)
            &amp;#123;
                auto tmp = pair&amp;lt;int, int&amp;gt;(t1-&amp;gt;first.first, t1-&amp;gt;first.second);
                if (t1-&amp;gt;second - t2-&amp;gt;second != 0)
                    c.push_back(pair&amp;lt;pair&amp;lt;int, int&amp;gt;, int&amp;gt;(tmp, t1-&amp;gt;second - t2-&amp;gt;second));
                else
                &amp;#123;
                    CNT--;
                &amp;#125;
                t1++, t2++;
                CNT--;
            &amp;#125;
            else if (t1-&amp;gt;first.second &amp;lt; t2-&amp;gt;first.second)
            &amp;#123;
                auto tmp = pair&amp;lt;int, int&amp;gt;(t1-&amp;gt;first.first, t1-&amp;gt;first.second);
                c.push_back(pair&amp;lt;pair&amp;lt;int, int&amp;gt;, int&amp;gt;(tmp, t1-&amp;gt;second));
                t1++;
            &amp;#125;
            else if (t1-&amp;gt;first.second &amp;gt; t2-&amp;gt;first.second)
            &amp;#123;
                auto tmp = pair&amp;lt;int, int&amp;gt;(t2-&amp;gt;first.first, t2-&amp;gt;first.second);
                c.push_back(pair&amp;lt;pair&amp;lt;int, int&amp;gt;, int&amp;gt;(tmp, -t2-&amp;gt;second));
                t2++;
            &amp;#125;
        &amp;#125;
        else if (t1-&amp;gt;first.first &amp;lt; t2-&amp;gt;first.first)
        &amp;#123;
            auto tmp = pair&amp;lt;int, int&amp;gt;(t1-&amp;gt;first.first, t1-&amp;gt;first.second);
            c.push_back(pair&amp;lt;pair&amp;lt;int, int&amp;gt;, int&amp;gt;(tmp, t1-&amp;gt;second));
            t1++;
        &amp;#125;
        else if (t1-&amp;gt;first.first &amp;gt; t2-&amp;gt;first.first)
        &amp;#123;
            auto tmp = pair&amp;lt;int, int&amp;gt;(t2-&amp;gt;first.first, t2-&amp;gt;first.second);
            c.push_back(pair&amp;lt;pair&amp;lt;int, int&amp;gt;, int&amp;gt;(tmp, -t2-&amp;gt;second));
            t2++;
        &amp;#125;
    &amp;#125;
    while (t2 != b.end())
    &amp;#123;
        auto tmp = pair&amp;lt;int, int&amp;gt;(t2-&amp;gt;first.first, t2-&amp;gt;first.second);
        c.push_back(pair&amp;lt;pair&amp;lt;int, int&amp;gt;, int&amp;gt;(tmp, -t2-&amp;gt;second));
        t2++;
    &amp;#125;
    while (t1 != a.end())
    &amp;#123;
        auto tmp = pair&amp;lt;int, int&amp;gt;(t1-&amp;gt;first.first, t1-&amp;gt;first.second);
        c.push_back(pair&amp;lt;pair&amp;lt;int, int&amp;gt;, int&amp;gt;(tmp, t1-&amp;gt;second));
        t1++;
    &amp;#125;
    auto it = c.begin();
    cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; CNT &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    while (it != c.end())
    &amp;#123;
        cout &amp;lt;&amp;lt; it-&amp;gt;first.first &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; it-&amp;gt;first.second &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; it-&amp;gt;second;
        if (it + 1 != c.end())
            cout &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
        it++;
    &amp;#125;
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;第二题二叉树的最短路径长&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二题二叉树的最短路径长&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第二题：二叉树的最短路径长&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;给定一棵二叉树 T，每个结点赋一个权值。计算从根结点到所有结点的最短路径长度。路径长度定义为：路径上的每个顶点的权值和。&lt;/p&gt;
&lt;h3 id=&#34;输入格式-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入格式-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;第 1 行，1 个整数 n，表示二叉树 T 的结点数，结点编号 1..n，1≤n≤20000。&lt;/p&gt;
&lt;p&gt;第 2 行，n 个整数，空格分隔，表示 T 的先根序列，序列中结点用编号表示。&lt;/p&gt;
&lt;p&gt;第 3 行，n 个整数，空格分隔，表示 T 的中根序列，序列中结点用编号表示。&lt;/p&gt;
&lt;p&gt;第 4 行，n 个整数 Wi，空格分隔，表示 T 中结点的权值，-10000≤Wi≤10000，1≤i≤n。&lt;/p&gt;
&lt;h3 id=&#34;输出格式-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出格式-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;1 行，n 个整数，表示根结点到其它所有结点的最短路径长度。&lt;/p&gt;
&lt;h3 id=&#34;输入样例-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入样例-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出一组输入。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;in&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4
1 2 4 3
4 2 1 3
1 -1 2 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;输出样例-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出样例-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出相应的输出。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;out&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 0 3 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;题目解析-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目解析-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;题目解析&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;使用中根序列和先跟序列递归建树，然后 DFS 更新每个节点的最短路径长度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cpp&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;using namespace std;

int _val[20001];
int result[20001] = &amp;#123;0&amp;#125;;

struct node
&amp;#123;
    int val;
    node *left;
    node *right;
&amp;#125;;

node *build(int *pre, int *in, int size)
&amp;#123;
    if (size &amp;lt;= 0)
        return nullptr;

    int i;
    for (i = 0; i &amp;lt;= size - 1; i++)
    &amp;#123;
        if (in[i] == pre[0])
            break;
    &amp;#125;

    node *tree = new node;
    tree-&amp;gt;val = pre[0];
    tree-&amp;gt;left = build(pre + 1, in, i);
    tree-&amp;gt;right = build(pre + i + 1, in + i + 1, size - 1 - i);
    return tree;
&amp;#125;

void DFS(node * root, int cost)
&amp;#123;
    if(root == nullptr) return;
    result[root-&amp;gt;val] = cost + _val[root-&amp;gt;val];
    DFS(root-&amp;gt;left, result[root-&amp;gt;val]);
    DFS(root-&amp;gt;right, result[root-&amp;gt;val]);
&amp;#125;

int main()
&amp;#123;
    int n;
    scanf(&amp;quot;%d&amp;quot;, &amp;amp;n);
    int _pre[20001], _in[20001];

    for(int i = 0; i &amp;lt;= n - 1; i++)
    &amp;#123;
        scanf(&amp;quot;%d&amp;quot;, &amp;amp;_pre[i]);
    &amp;#125;

    for(int i = 0; i &amp;lt;= n - 1; i++)
    &amp;#123;
        scanf(&amp;quot;%d&amp;quot;, &amp;amp;_in[i]);
    &amp;#125;

    for(int i = 1; i &amp;lt;= n; i++)
    &amp;#123;
        scanf(&amp;quot;%d&amp;quot;, &amp;amp;_val[i]);
    &amp;#125;

    node* root = build(_pre,_in,n);

    DFS(root, 0);

    for(int i = 1; i &amp;lt;= n; i++)
    &amp;#123;
        printf(&amp;quot;%d&amp;quot;, result[i]);
        if(i != n) printf(&amp;quot; &amp;quot;);
    &amp;#125;
    printf(&amp;quot;\n&amp;quot;);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;第三题文字编辑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第三题文字编辑&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第三题：文字编辑&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;一篇文章由 n 个汉字构成，汉字从前到后依次编号为 1，2，……，n。有四种操作：&lt;/p&gt;
&lt;p&gt;A i j 表示把编号为 i 的汉字移动编号为 j 的汉字之前；&lt;/p&gt;
&lt;p&gt;B i j 表示把编号为 i 的汉字移动编号为 j 的汉字之后；&lt;/p&gt;
&lt;p&gt;Q 0 i 为询问编号为 i 的汉字之前的汉字的编号；&lt;/p&gt;
&lt;p&gt;Q 1 i 为询问编号为 i 的汉字之后的汉字的编号。&lt;/p&gt;
&lt;p&gt;规定：1 号汉字之前是 n 号汉字，n 号汉字之后是 1 号汉字。&lt;/p&gt;
&lt;h3 id=&#34;输入格式-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入格式-3&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;第 1 行，1 个整数 T，表示有 T 组测试数据， 1≤T≤9999.&lt;/p&gt;
&lt;p&gt;随后的每一组测试数据中，第 1 行两个整数 n 和 m，用空格分隔，分别代表汉字数和操作数，2≤n≤9999，1≤m≤9999；第 2 至 m+1 行，每行包含 3 个常量 s、i 和 j，用空格分隔，s 代表操作的类型，若 s 为 A 或 B，则 i 和 j 表示汉字的编号，若 s 为 Q，i 代表 0 或 1，j 代表汉字的编号。&lt;/p&gt;
&lt;h3 id=&#34;输出格式-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出格式-3&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;若干行，每行 1 个整数，对应每个询问的结果汉字编号。&lt;/p&gt;
&lt;h3 id=&#34;输入样例-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入样例-3&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出一组输入。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;in&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1
9999 4
B 1 2
A 3 9999
Q 1 1
Q 0 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;输出样例-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出样例-3&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出相应的输出。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;out&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4
9998
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;题目解析-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目解析-3&#34;&gt;#&lt;/a&gt; &lt;strong&gt;题目解析&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&#34;方法一跳舞链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法一跳舞链&#34;&gt;#&lt;/a&gt; &lt;strong&gt;方法一：跳舞链&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;实现定点插入，定点查询，定点删除，且能满足 1000ms 的时间限制，使用跳舞链会比较合适。&lt;/p&gt;
&lt;p&gt;本题使用静态链表实现，会比较好写。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cpp&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;algorithm&amp;gt;using namespace std;
int main()
&amp;#123;
    int T;
    scanf(&amp;quot;%d&amp;quot;, &amp;amp;T);
    int pre[100001];
    int nxt[100001];
    int n, m;
    for (register int j = 0; j &amp;lt;= T - 1; j++)
    &amp;#123;
        scanf(&amp;quot;%d%d&amp;quot;, &amp;amp;n, &amp;amp;m);
        for (register int i = 1; i &amp;lt;= n; i++)
        &amp;#123;

            pre[i] = i - 1;
            nxt[i] = i + 1;
        &amp;#125;
        pre[1] = n;
        nxt[n] = 1;
        for (register int k = 0; k &amp;lt;= m - 1; k++)
        &amp;#123;
            char ch;
            int op1, op2;
            cin &amp;gt;&amp;gt; ch;
            scanf(&amp;quot;%d%d&amp;quot;, &amp;amp;op1, &amp;amp;op2);
            switch (ch)
            &amp;#123;
            case &#39;A&#39;:
            &amp;#123;
                nxt[pre[op1]] = nxt[op1];
                pre[nxt[op1]] = pre[op1];
                pre[op1] = pre[op2];
                nxt[op1] = op2;
                nxt[pre[op2]] = op1;
                pre[op2] = op1;
                break;
            &amp;#125;
            case &#39;B&#39;:
            &amp;#123;
                nxt[pre[op1]] = nxt[op1];
                pre[nxt[op1]] = pre[op1];
                pre[op1] = op2;
                nxt[op1] = nxt[op2];
                pre[nxt[op2]] = op1;
                nxt[op2] = op1;
                break;
            &amp;#125;
            case &#39;Q&#39;:
            &amp;#123;
                switch (op1)
                &amp;#123;
                case 0:
                &amp;#123;
                    printf(&amp;quot;%d\n&amp;quot;, pre[op2]);
                    break;
                &amp;#125;
                case 1:
                &amp;#123;
                    printf(&amp;quot;%d\n&amp;quot;, nxt[op2]);
                    break;
                &amp;#125;
                &amp;#125;
                break;
            &amp;#125;
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;第四题方案计数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第四题方案计数&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第四题：方案计数&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;组装一个产品需要 n 个零件。生产每个零件都需花费一定的时间。零件的生产可以并行进行。有些零件的生产有先后关系，只有一个零件的之前的所有零件都生产完毕，才能开始生产这个零件。如何合理安排工序，才能在最少的时间内完成所有零件的生产。在保证最少时间情况下，关键方案有多少种，关键方案是指从生产开始时间到结束时间的一个零件生产序列，序列中相邻两个零件的关系属于事先给出的零件间先后关系的集合，序列中的每一个零件的生产都不能延期。&lt;/p&gt;
&lt;h3 id=&#34;输入格式-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入格式-4&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;第 1 行，2 个整数 n 和 m，用空格分隔，分别表示零件数和关系数，零件编号 1..n，1≤n≤10000, 0≤m≤100000 。&lt;/p&gt;
&lt;p&gt;第 2 行，n 个整数 Ti，用空格分隔，表示零件 i 的生产时间，1≤i≤n，1≤Ti≤100 。&lt;/p&gt;
&lt;p&gt;第 3 到 m+2 行，每行两个整数 i 和 j，用空格分隔，表示零件 i 要在零件 j 之前生产。&lt;/p&gt;
&lt;h3 id=&#34;输出格式-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出格式-4&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;第 1 行，1 个整数，完成生产的最少时间。&lt;/p&gt;
&lt;p&gt;第 2 行，1 个整数，关键方案数，最多 100 位。&lt;/p&gt;
&lt;p&gt;如果生产不能完成，只输出 1 行，包含 1 个整数 0.&lt;/p&gt;
&lt;h3 id=&#34;输入样例-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入样例-4&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出一组输入。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;in&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4 4
1 2 2 1
1 2
1 3
2 4
3 4
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;输出样例-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出样例-4&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出相应的输出。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;out&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4
2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;题目解析-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目解析-4&#34;&gt;#&lt;/a&gt; &lt;strong&gt;题目解析&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&#34;方法一拓扑排序关键路径高精度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法一拓扑排序关键路径高精度&#34;&gt;#&lt;/a&gt; &lt;strong&gt;方法一：拓扑排序 + 关键路径 + 高精度&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;感谢 mxgg，上次有一个题目一直段错误，mxgg 发现是我爆了 int，建议我以后 #define int long long, 我说以后不是 BigInteger 我都不用，然后就机缘巧合向大佬学习写了 BigInt 的板子，mxgg yyds！！！&lt;/p&gt;
&lt;p&gt;除了需要高精度，读图时候，需要点权推到边权上，并把入度为 0 的点引到虚源，出度为 0 的点汇到虚源上，形成连通图，然后拓扑排序和关键路径算法。&lt;/p&gt;
&lt;p&gt;对于我这种蒟蒻，存板子就是我白月光！！！膜拜手拍大佬！！！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cpp&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;#include&amp;lt;string&amp;gt;#include&amp;lt;limits&amp;gt;#include&amp;lt;queue&amp;gt;#include&amp;lt;vector&amp;gt;#include&amp;lt;algorithm&amp;gt;using namespace std;

class Bigint
&amp;#123;
private:
    vector&amp;lt;int&amp;gt; content;
public:
    Bigint();
    Bigint(long long origin);
    Bigint(const Bigint&amp;amp; b);
    ~Bigint();
    unsigned long long size() const;
    Bigint operator+(const Bigint&amp;amp; b);
    Bigint&amp;amp; operator=(const Bigint&amp;amp; b);
    void resize(unsigned long long n);
    const int&amp;amp; operator[](unsigned long long i)const;
    int&amp;amp; operator[](unsigned long long i);
    string toString();
&amp;#125;;

Bigint::Bigint()&amp;#123;
    content.reserve(128);
    for (int i = 0; i &amp;lt; 128; ++i)&amp;#123;
        content.push_back(0);
    &amp;#125;

&amp;#125;

Bigint::Bigint(long long origin)&amp;#123;
    content.reserve(128);
    while (origin&amp;gt;0)
    &amp;#123;
        content.push_back(origin%10);
        origin=origin/10;
    &amp;#125;
&amp;#125;
Bigint::Bigint(const Bigint&amp;amp; b)&amp;#123;
    content.clear();
    for(int i=0;i&amp;lt;b.size();++i)&amp;#123;
        content.push_back(b[i]);
    &amp;#125;
&amp;#125;

Bigint::~Bigint()&amp;#123;
    content.clear();
&amp;#125;

Bigint Bigint::operator+(const Bigint&amp;amp; b)&amp;#123;
    Bigint t;
    Bigint res;
    unsigned long long maxsize=max(this-&amp;gt;size(),b.size());
    t.resize(maxsize+1);
    res.resize(maxsize+1);
    for (int i = 0; i &amp;lt; maxsize; ++i)&amp;#123;
        int num1=i&amp;lt;this-&amp;gt;size()?content[i]:0;
        int num2=i&amp;lt;b.size()?b[i]:0;
        res[i]=(num1+num2+t[i])%10;
        t[i+1]=(num1+num2+t[i])/10;
    &amp;#125;
    if(t[maxsize]!=0)&amp;#123;
        res[maxsize]=t[maxsize];
    &amp;#125;else&amp;#123;
        res.resize(maxsize);
    &amp;#125;
    return res;
&amp;#125;

Bigint&amp;amp; Bigint::operator=(const Bigint&amp;amp; b)&amp;#123;
    if(this==&amp;amp;b)&amp;#123;
        return *this;
    &amp;#125;else&amp;#123;
        content.clear();
        content.reserve(b.size());
        for(int i=0;i&amp;lt;b.size();++i)&amp;#123;
            content.push_back(b[i]);
        &amp;#125;
    &amp;#125;
    return *this;
&amp;#125;

unsigned long long Bigint::size()const&amp;#123;
        return content.size();
&amp;#125;

const int&amp;amp; Bigint::operator[](unsigned long long i)const&amp;#123;
    if(i&amp;gt;content.size())return *content.end();
    return (*(content.begin()+i));
&amp;#125;

int&amp;amp; Bigint::operator[](unsigned long long i)&amp;#123;
    if(i&amp;gt;content.size())return *content.end();
    return (*(content.begin()+i));
&amp;#125;

void Bigint::resize(unsigned long long n)&amp;#123;
    if(n&amp;gt;this-&amp;gt;size())&amp;#123;
        for (unsigned long long i = this-&amp;gt;size(); i &amp;lt;n; ++i)&amp;#123;
            content.push_back(0);
        &amp;#125;
    &amp;#125;else&amp;#123;
        for (unsigned long long i = this-&amp;gt;size(); i&amp;gt;n; --i)&amp;#123;
            content.pop_back();
        &amp;#125;
    &amp;#125;
&amp;#125;

string Bigint::toString()&amp;#123;
    bool flag=true;
    string res;
    for (int i = this-&amp;gt;size()-1; i &amp;gt;=0; --i)&amp;#123;
        if(flag&amp;amp;&amp;amp;content[i]==0)&amp;#123;
            continue;
        &amp;#125;else&amp;#123;
            if(flag&amp;amp;&amp;amp;content[i]!=0)&amp;#123;
                flag=false;
            &amp;#125;
            res.push_back(content[i]+48);
        &amp;#125;
    &amp;#125;
    if(flag)res.push_back(&#39;0&#39;);
    return res;
&amp;#125;

const int maxn = 10010;
int n = 0, m = 0;

int inDu[maxn] = &amp;#123;0&amp;#125;;
int inDu_bfs[maxn] = &amp;#123;0&amp;#125;;
int outDu[maxn] = &amp;#123;0&amp;#125;;
int es[maxn] = &amp;#123;0&amp;#125;;
int ls[maxn];
int cs[maxn] = &amp;#123;0&amp;#125;;

struct Node
&amp;#123;
    Node* nxt;
    int val;
    int cost;
    Node(int _val = 0, int _cost = 0)
    &amp;#123;
        cost = _cost;
        val = _val;
        nxt = nullptr;
    &amp;#125;
&amp;#125;;

Node *phead[maxn] = &amp;#123;nullptr&amp;#125;, *ptail[maxn] = &amp;#123;nullptr&amp;#125;;

void add(int _fr, int _to, int _cost)
&amp;#123;
    Node *t = ptail[_fr];
    if (t == nullptr)
    &amp;#123;
        phead[_fr] = new Node(_to,_cost);
        ptail[_fr] = phead[_fr];
    &amp;#125;
    else
    &amp;#123;
        ptail[_fr]-&amp;gt;nxt = new Node(_to, _cost);
        ptail[_fr] = ptail[_fr]-&amp;gt;nxt;
    &amp;#125;
    outDu[_fr]++;
    inDu[_to]++;
    inDu_bfs[_to]++;

&amp;#125;

void read_map()
&amp;#123;
    for(int i = 1; i &amp;lt;= n ; i++)
    &amp;#123;
        scanf(&amp;quot;%d&amp;quot;, &amp;amp;cs[i]);
    &amp;#125;
    int _fr = 0, _to = 0;
    for(int i  = 0; i &amp;lt;= m - 1; i++)
    &amp;#123;
        scanf(&amp;quot;%d%d&amp;quot;, &amp;amp;_fr, &amp;amp;_to);
        add(_fr, _to, cs[_to]);
    &amp;#125;

    for(int i = 1; i &amp;lt;= n; i++)
    &amp;#123;
        if(inDu[i] == 0)
        &amp;#123;
            add(0,i,cs[i]);
        &amp;#125;
        if(outDu[i] == 0)
        &amp;#123;
            add(i, n + 1, 0);
        &amp;#125;
    &amp;#125;
&amp;#125;

vector&amp;lt;int&amp;gt; topo_result;
void topo()
&amp;#123;
    queue&amp;lt;int&amp;gt; q;
    topo_result.reserve(maxn);
    q.push(0);
    while(!q.empty())
    &amp;#123;
        int now = q.front();
        q.pop();
        topo_result.push_back(now);
        for(auto it = phead[now]; it!= nullptr; it= it-&amp;gt;nxt)
        &amp;#123;
            int to = it-&amp;gt;val;
            int cost = it-&amp;gt;cost;
            inDu[to]--;
            if(inDu[to] == 0)
            &amp;#123;
                q.push(to);
            &amp;#125;
            es[to] = max(es[now] + cost, es[to]);
        &amp;#125;
    &amp;#125;
&amp;#125;

void Cpath()
&amp;#123;
    topo();
    ls[n+1] = es[n+1];
    for(int i = topo_result.size() - 1; i &amp;gt;= 0; i--)
    &amp;#123;
        int now = topo_result[i];
        for(auto it = phead[now]; it != nullptr; it = it-&amp;gt;nxt)
        &amp;#123;
            int to = it-&amp;gt;val;
            int cost = it-&amp;gt;cost;
            ls[now] = min(ls[to]-cost, ls[now]);
        &amp;#125;
    &amp;#125;
&amp;#125;

Bigint tmp[maxn];
Bigint res;
int vis[maxn] = &amp;#123;0&amp;#125;;

void bfs(int x)
&amp;#123;
    queue&amp;lt;int&amp;gt; q;
    q.push(x);
    vis[x] = 1;
    while(!q.empty())
    &amp;#123;
        int now = q.front();
        q.pop();
        vis[now] = 1;
        for(auto it = phead[now]; it != nullptr; it = it-&amp;gt;nxt)
        &amp;#123;
            int to = it-&amp;gt;val;
            inDu_bfs[to]--;
            if(es[to] == ls[to])
            &amp;#123;
                tmp[to] = tmp[now] + tmp[to];
            &amp;#125;
            if(inDu_bfs[to] == 0)
            &amp;#123;
                q.push(to);
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;

int main()
&amp;#123;
    for(int i = 0; i &amp;lt;= maxn - 1; i++)
    &amp;#123;
        ls[i] = INT32_MAX;
    &amp;#125;
    scanf(&amp;quot;%d%d&amp;quot;, &amp;amp;n, &amp;amp;m);
    read_map();
    Cpath();
    tmp[0] = 1;
    bfs(0);
    long long result = es[n+1];
    res = tmp[n+1];
    if(res.toString() != &amp;quot;0&amp;quot;) cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt;endl;
    cout &amp;lt;&amp;lt; res.toString() &amp;lt;&amp;lt; endl;
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="编程" scheme="http://leomeng86.github.io/tags/%E7%BC%96%E7%A8%8B/" />
        <category term="数据结构" scheme="http://leomeng86.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" />
        <updated>2022-09-06T04:02:32.000Z</updated>
    </entry>
    <entry>
        <id>http://leomeng86.github.io/2022/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/</id>
        <title>数据结构第五次上机实验</title>
        <link rel="alternate" href="http://leomeng86.github.io/2022/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
        <content type="html">&lt;h2 id=&#34;第一题重复计数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一题重复计数&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第一题：重复计数&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;在一个有限的正整数序列中，有些数会多次重复出现。请你统计每个数的出现次数，然后按数字在序列中第一次出现的位置顺序输出数及其次数。&lt;/p&gt;
&lt;h3 id=&#34;输入格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入格式&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;第 1 行，1 个整数 N，表示整数的个数，(1≤N≤50000)。&lt;/p&gt;
&lt;p&gt;第 2 行，N 个正整数，每个整数 x 都满足 1 ≤ x ≤2000000000。&lt;/p&gt;
&lt;h3 id=&#34;输出格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出格式&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;若干行，每行两个用一个空格隔开的数，第一个是数列中出现的数，第二个是该数在序列中出现的次数。&lt;/p&gt;
&lt;h3 id=&#34;输入样例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入样例&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出一组输入。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;in&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;12
8 2 8 2 2 11 1 1 8 1 13 13
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;输出样例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出样例&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出相应的输出。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;out&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;8 3
2 3
11 1
1 3
13 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;题目解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目解析&#34;&gt;#&lt;/a&gt; &lt;strong&gt;题目解析&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&#34;方法一stl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法一stl&#34;&gt;#&lt;/a&gt; &lt;strong&gt;方法一：STL&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;STL 大法好，map 的 find 时间复杂度是 log 级别，找到了会返回目标的迭代器，找不到会返回 end ()，然后用一个 queue 来存顺序，STL 我的神！！！&lt;/p&gt;
&lt;h3 id=&#34;代码实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码实现&#34;&gt;#&lt;/a&gt; &lt;strong&gt;代码实现：&lt;/strong&gt;&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;algorithm&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;map&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;queue&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; tmp&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;scanf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%d&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    map&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; m&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    queue&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; Q&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;scanf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%d&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;tmp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; it &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; m&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tmp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;it &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; m&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            Q&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tmp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            m&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tmp&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            it&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;second&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;Q&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; it &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; m&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Q&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;front&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        Q&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;first &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;second&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        m&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;erase&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;it&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Q&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;\\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;第二题字符串周期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二题字符串周期&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第二题：字符串周期&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;一个字符串可以看成由某个长度为 k 的前缀重复若干次得到，称 k 为该字符串的周期。例如：”abababab” 以 2、4、8 为周期。请计算一个字符串的最小周期。&lt;/p&gt;
&lt;h3 id=&#34;输入格式-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入格式-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;输入包含多行。每行包含一个字符串 s，s 至少 1 个字符，最多 1000000 个字符。最后一行是一个点，表示输入结束，不必求解。输入较大，建议使用 scanf。&lt;/p&gt;
&lt;h3 id=&#34;输出格式-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出格式-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;多行，每行一个整数，对应每一行输入 s 的最小周期。&lt;/p&gt;
&lt;h3 id=&#34;输入样例-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入样例-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出一组输入。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;abcd
aaaa
ababab
.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;输出样例-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出样例-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出相应的输出。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4
1
2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;题目解析-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目解析-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;题目解析&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&#34;方法一朴素匹配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法一朴素匹配&#34;&gt;#&lt;/a&gt; &lt;strong&gt;方法一：朴素匹配&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;感觉应该过不了，没有写，刚讲了 kmp，估计用 kmp 才是正解（doge）；&lt;/p&gt;
&lt;h3 id=&#34;方法二kmp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法二kmp&#34;&gt;#&lt;/a&gt; &lt;strong&gt;方法二：KMP&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;本题目我选择了 next 数组的方法。即求前后缀的最大匹配值。&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;cstring&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; num &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1000001&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; next&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    next&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; k &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; j &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; len &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;j &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; len&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;k &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;k&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;k&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            next&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; k&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            k &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; next&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;k&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;MinCycle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; next&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;Next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; next&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; len &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; mclen &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; len &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; next&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;len&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; mclen&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1000001&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;scanf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%s&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;strcmp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;.&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;MinCycle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;第三题交换次数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第三题交换次数&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第三题：交换次数&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;序列 A 中有 N 个整数。&lt;/p&gt;
&lt;p&gt;求对 A 进行冒泡排序发生的元素交换次数。&lt;/p&gt;
&lt;h3 id=&#34;输入格式-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入格式-3&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;第一行输入整数 N (2&amp;lt;=N&amp;lt;=10^6). 接下来一行 N 个正整数数 A [i] (1≤i≤N ，A [i]&amp;lt;=10^6)。&lt;/p&gt;
&lt;h3 id=&#34;输出格式-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出格式-3&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;一行，有一个整数，表示元素交换的次数。&lt;/p&gt;
&lt;h3 id=&#34;输入样例-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入样例-3&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出一组输入。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;in&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4
2 4 3 1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;输出样例-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出样例-3&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出相应的输出。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;out&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;题目解析-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目解析-3&#34;&gt;#&lt;/a&gt; &lt;strong&gt;题目解析&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&#34;方法一树状数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法一树状数组&#34;&gt;#&lt;/a&gt; &lt;strong&gt;方法一：树状数组&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;冒泡排序的交换次数，取决于逆序数的数量，本题目使用树状数组计算逆序数，树状数组和线段树类似，可以实现单点更新单点查询，单点更新区间查询，区间更新单点查询，区间更新区间查询。&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; maxn &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1e6&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; bit&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;maxn&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;maxn&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        s &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; bit&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        i &lt;span class=&#34;token operator&#34;&gt;-=&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt;maxn&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        bit&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        i &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;solve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; ans &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; j &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        ans &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; j &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%lld\\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;ans&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;scanf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%d&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;scanf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%d&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;solve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;第四题维护序列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第四题维护序列&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第四题：维护序列&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;一个序列初始为空。给出 N (N&amp;lt;=1000000) 个操作维护序列。&lt;/p&gt;
&lt;h3 id=&#34;输入格式-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入格式-4&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;第 1 行 整数 N；然后有 N 行，每行两个数，ch 和 kch=1 表示插入一个值为 k 的数 ch=2 表示查询第 k 小的数（k 合法）ch=3 表示删除值为 k 的数 (k 一定存在)&lt;/p&gt;
&lt;h3 id=&#34;输出格式-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出格式-4&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;输出查询操作的结果值。每个一行。&lt;/p&gt;
&lt;h3 id=&#34;输入样例-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入样例-4&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出一组输入。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;in&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;5
1 2
1 3
2 1
3 2
2 1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;输出样例-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出样例-4&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出相应的输出。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;out&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2
3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;题目解析-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目解析-4&#34;&gt;#&lt;/a&gt; &lt;strong&gt;题目解析&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;能满足插入值为 k 的数，查询第 k 小的数，删除值为 k 的数的数据结构，限制 1000ms，应该选择高度平衡树。据说还卡 splay，没有写过类似的板子，看到这个题目，简直绝望，用暴力法骗了 20 分，只能下课请教大佬。感谢 mxgg 和 zygg 提供的 treap 的解法和帮我一起 debug，我哭死。&lt;/p&gt;
&lt;p&gt;treap 是树堆，比较容易实现，比较基础，且常数不大。有 BST 的性质，也有 Heap 的性质，可以维护排名，又能保证深度在 logn 级别。&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;bits/stdc++.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; maxn &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1e7&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; mod &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1e7&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;node&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; rd&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; pl&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; pr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; size&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;maxn&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; sz&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; root&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;maintain&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pl&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pr&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;R_rorate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ii &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pl &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;ii&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;ii&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; p&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;ii&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;maintain&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ii&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;L_rorate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ii &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;ii&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;ii&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pl &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; p&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;ii&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;maintain&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ii&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;sz&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; mod&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token function&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token function&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pl&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pl &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rd &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pl&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rd&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token function&#34;&gt;R_rorate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pr &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rd &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pr&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rd&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token function&#34;&gt;L_rorate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;maintain&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;key &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pl &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pr &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pl &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pr &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pl &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pl&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rd &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pr&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rd&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;84&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;85&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token function&#34;&gt;R_rorate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;86&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token function&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;87&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;88&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;89&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;90&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;91&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token function&#34;&gt;L_rorate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;92&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token function&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pl&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;93&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;94&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;95&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;96&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;97&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;key &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;98&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;99&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token function&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;100&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;101&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;102&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;103&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token function&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pl&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;104&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;105&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;maintain&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;106&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;107&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;108&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;kth&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; p&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;109&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;110&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pl&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;111&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;112&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;113&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;114&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pl&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;115&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;116&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;kth&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pl&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;117&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;118&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;kth&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pl&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;119&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;120&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;121&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;122&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;123&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	ios&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sync_with_stdio&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; cin&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;tie&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;124&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;srand&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mod&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;125&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;126&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;scanf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%d&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;127&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ch&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ch1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;128&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;129&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;130&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token function&#34;&gt;scanf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%d%d&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;ch&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;ch1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;131&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ch&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;132&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;133&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;134&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token function&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;root&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ch1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;135&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;136&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;137&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%d\\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;kth&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;root&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ch1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;138&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;139&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;140&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token function&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;root&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ch1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;141&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;142&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;143&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;144&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;145&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="编程" scheme="http://leomeng86.github.io/tags/%E7%BC%96%E7%A8%8B/" />
        <category term="数据结构" scheme="http://leomeng86.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" />
        <updated>2022-09-06T04:02:18.000Z</updated>
    </entry>
    <entry>
        <id>http://leomeng86.github.io/2022/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/</id>
        <title>数据结构第四次上机实验</title>
        <link rel="alternate" href="http://leomeng86.github.io/2022/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
        <content type="html">&lt;h2 id=&#34;第一题-图的深度优先搜索i&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一题-图的深度优先搜索i&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第一题： 图的深度优先搜索 I&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;无向图 G 有 n 个顶点和 m 条边。求图 G 的深度优先搜索树 (森林) 以及每个顶点的发现时间和完成时间。每个连通分量从编号最小的结点开始搜索，邻接顶点选择顺序遵循边的输入顺序。&lt;/p&gt;
&lt;p&gt;在搜索过程中，第一次遇到一个结点，称该结点被发现；一个结点的所有邻接结点都搜索完，该结点的搜索被完成。深度优先搜索维护一个时钟，时钟从 0 开始计数，结点被搜索发现或完成时，时钟计数增 1，然后为当前结点盖上时间戳。一个结点被搜索发现和完成的时间戳分别称为该结点的发现时间和完成时间&lt;/p&gt;
&lt;h3 id=&#34;输入格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入格式&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;第 1 行，2 个整数 n 和 m，用空格分隔，分别表示顶点数和边数， 1≤n≤50000， 1≤m≤100000.&lt;/p&gt;
&lt;p&gt;第 2 到 m+1 行，每行两个整数 u 和 v，用空格分隔，表示顶点 u 到顶点 v 有一条边，u 和 v 是顶点编号，1≤u,v≤n.&lt;/p&gt;
&lt;h3 id=&#34;输出格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出格式&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;第 1 到 n 行，每行两个整数 di 和 fi，用空格分隔，表示第 i 个顶点的发现时间和完成时间 1≤i≤n 。&lt;/p&gt;
&lt;p&gt;第 n+1 行，1 个整数 k ，表示图的深度优先搜索树 (森林) 的边数。&lt;/p&gt;
&lt;p&gt;第 n+2 到 n+k+1 行，每行两个整数 u 和 v, 表示深度优先搜索树 (森林) 的一条边 &amp;lt; u,v&amp;gt;，边的输出顺序按 v 结点编号从小到大。&lt;/p&gt;
&lt;h3 id=&#34;输入样例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入样例&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出一组输入。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;in&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;6 5
1 3
1 2
2 3
4 5
5 6
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;输出样例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出样例&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出相应的输出。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;out&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 6
3 4
2 5
7 12
8 11
9 10
4
3 2
1 3
4 5
5 6
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;题目解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目解析&#34;&gt;#&lt;/a&gt; &lt;strong&gt;题目解析&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&#34;方法一深度优先遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法一深度优先遍历&#34;&gt;#&lt;/a&gt; &lt;strong&gt;方法一：深度优先遍历&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;根据题目说的用 DFS，使用一个 timer 来标识时间，然后用数组存每一个节点的进入时间和离开时间。&lt;/p&gt;
&lt;h3 id=&#34;代码实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码实现&#34;&gt;#&lt;/a&gt; &lt;strong&gt;代码实现：&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&#34;dfs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dfs&#34;&gt;#&lt;/a&gt; DFS：&lt;/h3&gt;
&lt;p&gt;每个 DFS 的点要用用 vis 数组标志访问情况，然后用 timer 给 intime 赋值，该节点遍历完成后，再用 timer 给 outtime 赋值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cpp&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void dfs(int x)
&amp;#123;
    vis[x] = 1;
    intime[x] = ++timer;

    node *p = phead[x];

    while(p != nullptr)
    &amp;#123;
        if(vis[p-&amp;gt;val] != 1)
        &amp;#123;
            list.push(edge(x,p-&amp;gt;val));
            dfs(p-&amp;gt;val);
        &amp;#125;
        p = p-&amp;gt;next;
    &amp;#125;

    outtime[x] = ++timer;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;完整代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#完整代码&#34;&gt;#&lt;/a&gt; 完整代码：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;cpp&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;queue&amp;gt;using namespace std;

int timer = 0;
int intime[50001] = &amp;#123;0&amp;#125;, outtime[50001] = &amp;#123;0&amp;#125;;
int n, m, v1, v2;
int vis[50001] = &amp;#123;0&amp;#125;;

class node
&amp;#123;
public:
    int val;
    node *next;
    node(int _v)
    &amp;#123;
        val = _v;
        next = nullptr;
    &amp;#125;
&amp;#125;;

node *phead[50001] = &amp;#123;nullptr&amp;#125;;
node *ptail[50001] = &amp;#123;nullptr&amp;#125;;

class edge
&amp;#123;
public:
    int u, v;
    edge(int u_tmp, int v_tmp) : u(u_tmp), v(v_tmp)&amp;#123;&amp;#125;;
    bool operator&amp;lt;(const edge &amp;amp;b) const
    &amp;#123;
        return v &amp;gt; b.v;
    &amp;#125;
&amp;#125;;

priority_queue&amp;lt;edge&amp;gt; list;

void add(int &amp;amp;a, int &amp;amp;b)
&amp;#123;
    node *t = ptail[a];
    if (t == nullptr)
    &amp;#123;
        phead[v1] = new node(v2);
        ptail[v1] = phead[v1];
    &amp;#125;
    else
    &amp;#123;
        ptail[v1]-&amp;gt;next = new node(v2);
        ptail[v1] = ptail[v1]-&amp;gt;next;
    &amp;#125;

    t = ptail[v2];
    if (t == nullptr)
    &amp;#123;
        phead[v2] = new node(v1);
        ptail[v2] = phead[v2];
    &amp;#125;
    else
    &amp;#123;
        ptail[v2]-&amp;gt;next = new node(v1);
        ptail[v2] = ptail[v2]-&amp;gt;next;
    &amp;#125;
&amp;#125;

void dfs(int x)
&amp;#123;
    vis[x] = 1;
    intime[x] = ++timer;

    node *p = phead[x];

    while (p != nullptr)
    &amp;#123;
        if (vis[p-&amp;gt;val] != 1)
        &amp;#123;
            list.push(edge(x, p-&amp;gt;val));
            dfs(p-&amp;gt;val);
        &amp;#125;
        p = p-&amp;gt;next;
    &amp;#125;

    outtime[x] = ++timer;
&amp;#125;

int main()
&amp;#123;
    scanf(&amp;quot;%d%d&amp;quot;, &amp;amp;n, &amp;amp;m);

    for (int i = 0; i &amp;lt;= m - 1; i++)
    &amp;#123;
        scanf(&amp;quot;%d%d&amp;quot;, &amp;amp;v1, &amp;amp;v2);
        add(v1, v2);
    &amp;#125;

    for (int i = 1; i &amp;lt;= n; i++)
    &amp;#123;
        if (vis[i] != 1)
        &amp;#123;
            dfs(i);
        &amp;#125;
    &amp;#125;

    for (int i = 1; i &amp;lt;= n; i++)
    &amp;#123;
        printf(&amp;quot;%d %d\\n&amp;quot;, intime[i], outtime[i]);
    &amp;#125;
    cout &amp;lt;&amp;lt; list.size() &amp;lt;&amp;lt; endl;
    while (!list.empty())
    &amp;#123;
        printf(&amp;quot;%d %d\\n&amp;quot;, list.top().u, list.top().v);
        list.pop();
    &amp;#125;
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;教训&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#教训&#34;&gt;#&lt;/a&gt; &lt;strong&gt;教训&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;把各个函数都改了一遍，发现 oj 居然卡 cin 和 cout，不要用 cin 或者 cout 还有 endl，会变得不幸。&lt;/p&gt;
&lt;h2 id=&#34;第二题数字变换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二题数字变换&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第二题：数字变换&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;利用变换规则，一个数可以变换成另一个数。变换规则如下：（1）x 变为 x+1；（2）x 变为 2x；（3）x 变为 x-1。给定两个数 x 和 y，至少经过几步变换能让 x 变换成 y.&lt;/p&gt;
&lt;h3 id=&#34;输入格式-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入格式-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;1 行，2 个整数 x 和 y，用空格分隔， 1≤x,y≤100000.&lt;/p&gt;
&lt;h3 id=&#34;输出格式-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出格式-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;第 1 行，1 个整数 s，表示变换的最小步数。&lt;/p&gt;
&lt;p&gt;第 2 行，s 个数，用空格分隔，表示最少变换时每步变换的结果。规则使用优先级顺序: （1），（2），（3）。&lt;/p&gt;
&lt;h3 id=&#34;输入样例-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入样例-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出一组输入。例如&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;in&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2 14
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;输出样例-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出样例-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出相应的输出。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;out&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4
3 6 7 14
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;题目解析-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目解析-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;题目解析&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;无权无限图最短路问题，为防止两种不同步骤产生相同答案的重复计算，使用 vis 数组标志已访问变量，答案用 path 数组记录，输出时是逆序，应使用 stack 存储后，正序输出。&lt;/p&gt;
&lt;h3 id=&#34;方法一广度优先遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法一广度优先遍历&#34;&gt;#&lt;/a&gt; &lt;strong&gt;方法一：广度优先遍历&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&#34;bfs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bfs&#34;&gt;#&lt;/a&gt; BFS：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;cpp&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void bfs(int x, int y)
&amp;#123;
    queue&amp;lt;int&amp;gt; q;
    q.push(x);
    while(!q.empty())
    &amp;#123;
        int tmp = q.front();
        q.pop();
        if(tmp + 1 &amp;lt;= maxn &amp;amp;&amp;amp; path[tmp+1] == tmp + 1)
        &amp;#123;
            q.push(tmp + 1);
            path[tmp + 1] = tmp;
            if(tmp + 1 == y) return;
        &amp;#125;
        if(tmp * 2 &amp;lt;= maxn &amp;amp;&amp;amp; path[tmp * 2] == tmp * 2)
        &amp;#123;
            q.push(tmp *2);
            path[tmp* 2] = tmp;
            if(tmp * 2 == y) return;
        &amp;#125;
        if(tmp - 1 &amp;gt; 0 &amp;amp;&amp;amp; tmp - 1 &amp;lt;= maxn &amp;amp;&amp;amp; path[tmp -1] == tmp -1)
        &amp;#123;
            q.push(tmp - 1);
            path[tmp - 1] = tmp;
            if(tmp - 1 == y) return;
        &amp;#125;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;完整代码-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#完整代码-2&#34;&gt;#&lt;/a&gt; 完整代码：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;cpp&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;#include&amp;lt;stack&amp;gt;#include&amp;lt;queue&amp;gt;using namespace std;

const int maxn = 100010;
int path[maxn] = &amp;#123;0&amp;#125;;

void bfs(int x, int y)
&amp;#123;
    queue&amp;lt;int&amp;gt; q;
    q.push(x);
    while(!q.empty())
    &amp;#123;
        int tmp = q.front();
        q.pop();
        if(tmp + 1 &amp;lt;= maxn &amp;amp;&amp;amp; path[tmp+1] == tmp + 1)
        &amp;#123;
            q.push(tmp + 1);
            path[tmp + 1] = tmp;
            if(tmp + 1 == y) return;
        &amp;#125;
        if(tmp * 2 &amp;lt;= maxn &amp;amp;&amp;amp; path[tmp * 2] == tmp * 2)
        &amp;#123;
            q.push(tmp *2);
            path[tmp* 2] = tmp;
            if(tmp * 2 == y) return;
        &amp;#125;
        if(tmp - 1 &amp;gt; 0 &amp;amp;&amp;amp; tmp - 1 &amp;lt;= maxn &amp;amp;&amp;amp; path[tmp -1] == tmp -1)
        &amp;#123;
            q.push(tmp - 1);
            path[tmp - 1] = tmp;
            if(tmp - 1 == y) return;
        &amp;#125;

    &amp;#125;
&amp;#125;

int main()
&amp;#123;
    int x, y, cnt = 0;
    cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;

    for(int i = 0; i &amp;lt;= maxn - 1; i++)
    &amp;#123;
        path[i] = i;
    &amp;#125;
    bfs(x, y);

    path[x] = x;
    stack&amp;lt;int&amp;gt; result;
    while(path[y] != y)
    &amp;#123;
        cnt++;
        result.push(y);
        y = path[y];
    &amp;#125;

    cout &amp;lt;&amp;lt; cnt &amp;lt;&amp;lt; endl;

    while(!result.empty())
    &amp;#123;
        cout &amp;lt;&amp;lt; result.top();
        result.pop();
        if(!result.empty()) cout &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
    &amp;#125;
    //cout &amp;lt;&amp;lt; endl;
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;教训-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#教训-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;教训&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;结尾输出空行会导致第一个样例因为格式错误过不了。以后 OJ 出现这种异常，可以试试更改一下格式。&lt;/p&gt;
&lt;h2 id=&#34;第三题修轻轨&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第三题修轻轨&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第三题：修轻轨&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;全屏浏览题目切换布局&lt;/p&gt;
&lt;p&gt;长春市有 n 个交通枢纽，计划在 1 号枢纽到 n 号枢纽之间修建一条轻轨。轻轨由多段隧道组成，候选隧道有 m 段。每段候选隧道只能由一个公司施工，施工天数对各家公司一致。有 n 家施工公司，每家公司同时最多只能修建一条候选隧道。所有公司可以同时开始施工。请评估：修建这条轻轨最少要多少天。&lt;/p&gt;
&lt;h3 id=&#34;输入格式-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入格式-3&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;第 1 行，两个整数 n 和 m，用空格分隔，分别表示交通枢纽的数量和候选隧道的数量，1 ≤ n ≤ 100000，1 ≤ m ≤ 200000。&lt;/p&gt;
&lt;p&gt;第 2 行到第 m+1 行，每行三个整数 a、b、c，用空格分隔，表示枢纽 a 和枢纽 b 之间可以修建一条双向隧道，施工时间为 c 天，1 ≤ a, b ≤ n，1 ≤ c ≤ 1000000。&lt;/p&gt;
&lt;h3 id=&#34;输出格式-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出格式-3&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;输出一行，包含一个整数，表示最少施工天数。&lt;/p&gt;
&lt;h3 id=&#34;输入样例-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入样例-3&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出一组输入。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;in&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;6 6
1 2 4
2 3 4
3 6 7
1 4 2
4 5 5
5 6 6
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;输出样例-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出样例-3&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出相应的输出。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;out&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;题目解析-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目解析-3&#34;&gt;#&lt;/a&gt; &lt;strong&gt;题目解析&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;一共有 n 个枢纽，即使由起点出发，遍历所有枢纽，到达终点，也只需要 n-1 条边，不需要考虑某一家公司需要完成第一条施工后再施工第二条。我们要求的就是从起点到终点的一条路径，使得该路径上的权值最大值最小，这时候就比较容易联想到最小生成树算法 Kruskal，贪心思想，每一次都取最小的边加入并查集。经过推理，发现每次取边之后，判断一下起点和终点在同一集合内，哪怕选取的边最后不会使用，但是这样并不影响完成从起点到终点这一路径过程中的最大值。&lt;/p&gt;
&lt;h3 id=&#34;方法一kruskal&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法一kruskal&#34;&gt;#&lt;/a&gt; &lt;strong&gt;方法一：Kruskal&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&#34;代码实现-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码实现-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;代码实现&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;cpp&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;#include&amp;lt;queue&amp;gt;#include&amp;lt;vector&amp;gt;using namespace std;

int pre[100001];
int cur = 0;
int n, m, v1, v2, cost_tmp;

int find(int x)
&amp;#123;
    if(pre[x] == x) return x;
    return pre[x] = find(pre[x]);
&amp;#125;

void join(int x, int y)
&amp;#123;
    int fx = find(x), fy = find(y);
    if(fx != fy)
        pre[fx] = fy;
&amp;#125;

struct edge
&amp;#123;
    int fr, to;
    int cost;
    edge(int _fr, int _to, int _cost):fr(_fr), to(_to), cost(_cost)&amp;#123;&amp;#125;;
    bool operator &amp;gt;(const edge &amp;amp; b)const
    &amp;#123;
        return cost &amp;gt; b.cost;
    &amp;#125;
&amp;#125;;

priority_queue&amp;lt;edge,vector&amp;lt;edge&amp;gt;,greater&amp;lt;edge&amp;gt;&amp;gt; list;

int main()
&amp;#123;
    scanf(&amp;quot;%d%d&amp;quot;, &amp;amp;n, &amp;amp;m);

    for(int i = 1; i &amp;lt;= n; i++)
    &amp;#123;
        pre[i] = i;
    &amp;#125;

    for(int i = 0; i &amp;lt;= m - 1; i++)
    &amp;#123;
        scanf(&amp;quot;%d%d%d&amp;quot;, &amp;amp;v1, &amp;amp;v2, &amp;amp;cost_tmp);
        edge *tmp = new edge(v1, v2, cost_tmp);
        list.push(*tmp);
    &amp;#125;

    while(find(n) != find(1))
    &amp;#123;
        if(list.empty()) break;
        edge Edge = list.top();
        list.pop();
        int vex1 = Edge.fr;
        int vex2 = Edge.to;
        int cost_cur = Edge.cost;
        if(find(vex1) != find(vex2))
        &amp;#123;
            cur = cost_cur;
            join(vex1,vex2);
        &amp;#125;
    &amp;#125;

    printf(&amp;quot;%d&amp;quot;, cur);
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;第四题发红包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第四题发红包&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第四题：发红包&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;新年到了，公司要给员工发红包。员工们会比较获得的红包，有些员工会有钱数的要求，例如，c1 的红包钱数要比 c2 的多。每个员工的红包钱数至少要发 888 元，这是一个幸运数字。&lt;/p&gt;
&lt;p&gt;公司想满足所有员工的要求，同时也要花钱最少，请你帮助计算。&lt;/p&gt;
&lt;h3 id=&#34;输入格式-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入格式-4&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;第 1 行，两个整数 n 和 m (n&amp;lt;=10000,m&amp;lt;=20000)，用空格分隔，分别代表员工数和要求数。&lt;/p&gt;
&lt;p&gt;接下来 m 行，每行两个整数 c1 和 c2，用空格分隔，表示员工 c1 的红包钱数要比 c2 多，员工的编号 1~n 。&lt;/p&gt;
&lt;h3 id=&#34;输出格式-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出格式-4&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;一个整数，表示公司发的最少钱数。如果公司不能满足所有员工的需求，输出 - 1.&lt;/p&gt;
&lt;h3 id=&#34;输入样例-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入样例-4&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出一组输入。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;in&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2 1
1 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;输出样例-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出样例-4&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出相应的输出。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;out&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1777
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;题目解析-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目解析-4&#34;&gt;#&lt;/a&gt; &lt;strong&gt;题目解析&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;基础红包 888 元，钱数要求是整数，则可以视为边权均为 1。&lt;/p&gt;
&lt;p&gt;假设有三个人：&lt;/p&gt;
&lt;p&gt;1:c1 比 c2 多，c2 比 c3 多。则：最少钱数：c1=890, c2=889, c3 = 888;&lt;/p&gt;
&lt;p&gt;2: 出现环：c1 比 c2 多，c2 比 c3 多，c3 比 c1 多。这种情况的出现，会导致该公司不能满足所有员工的需求。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://leomeng86.github.io/2022/05/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/1.jpg&#34; alt=&#34;https://leomeng86.github.io/2022/05/18/数据结构第四次上机实验/1.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;picture&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本题目涉及有向，且先后关联，需要判环，应使用 AOV 拓扑排序。&lt;/p&gt;
&lt;h3 id=&#34;方法一aov拓扑排序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法一aov拓扑排序&#34;&gt;#&lt;/a&gt; &lt;strong&gt;方法一：AOV 拓扑排序&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&#34;代码实现-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码实现-3&#34;&gt;#&lt;/a&gt; &lt;strong&gt;代码实现&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;cpp&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;vector&gt;&lt;/span&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;queue&gt;&lt;/span&gt;&lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;vertex&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; val&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    vertex &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;next&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;vertex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; v&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; vertex &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;n &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;v&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;vertex &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;phead&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10001&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;ptail&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10001&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; du&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10001&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; plus_cnt&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10001&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;queue&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; q&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; sum &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; cnt &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    vertex &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;tmp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ptail&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tmp &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        phead&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;vertex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        ptail&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; phead&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        ptail&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;next &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;vertex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        ptail&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ptail&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;next&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    du&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; m&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; v1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; v2&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; n &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; m&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    sum &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; n &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;888&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; m &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; v1 &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; v2&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;v2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; v1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;du&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            q&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            cnt&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;q&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; q&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;front&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        q&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        vertex &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;tmp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; phead&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tmp &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            du&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;tmp&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;val&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;du&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;tmp&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;val&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                q&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tmp&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;val&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                cnt&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;plus_cnt&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;tmp&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;val&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; plus_cnt&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                plus_cnt&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;tmp&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;val&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; plus_cnt&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            tmp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; tmp&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;next&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; flag &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cnt &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        flag &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        sum &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; plus_cnt&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;84&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;85&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;86&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;87&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; sum&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;88&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;89&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;90&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="编程" scheme="http://leomeng86.github.io/tags/%E7%BC%96%E7%A8%8B/" />
        <category term="数据结构" scheme="http://leomeng86.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" />
        <updated>2022-09-06T04:00:18.000Z</updated>
    </entry>
    <entry>
        <id>http://leomeng86.github.io/2022/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/</id>
        <title>数据结构第三次上机实验</title>
        <link rel="alternate" href="http://leomeng86.github.io/2022/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
        <content type="html">&lt;h2 id=&#34;第一题连通分量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一题连通分量&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第一题：连通分量&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;无向图 G 有 n 个顶点和 m 条边。求 G 的连通分量的数目。&lt;/p&gt;
&lt;h3 id=&#34;输入格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入格式&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入格式：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;第 1 行，2 个整数 n 和 m，用空格分隔，分别表示顶点数和边数， 1≤n≤50000， 1≤m≤100000.&lt;/p&gt;
&lt;p&gt;第 2 到 m+1 行，每行两个整数 u 和 v，用空格分隔，表示顶点 u 到顶点 v 有一条边，u 和 v 是顶点编号，1≤u,v≤n.&lt;/p&gt;
&lt;h3 id=&#34;输出格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出格式&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出格式：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;1 行，1 个整数，表示所求连通分量的数目。&lt;/p&gt;
&lt;h3 id=&#34;输入样例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入样例&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入样例：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出一组输入。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;in&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;6 5
1 3
1 2
2 3
4 5
5 6
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;输入样例-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入样例-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入样例：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出相应的输出。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;out&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;题目解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目解析&#34;&gt;#&lt;/a&gt; &lt;strong&gt;题目解析：&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&#34;方法一深度优先遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法一深度优先遍历&#34;&gt;#&lt;/a&gt; &lt;strong&gt;方法一：深度优先遍历&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;通过对每一个连通分量进行 DFS（深度优先遍历），来遍历这个连通分量的所有节点，使用 vis 数组判断是否位于该节点是否位于原来已经遍历过的连通分量中，使用 cnt 变量来记录分支数量。&lt;/p&gt;
&lt;h3 id=&#34;代码实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码实现&#34;&gt;#&lt;/a&gt; &lt;strong&gt;代码实现&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&#34;读入无向图邻接表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#读入无向图邻接表&#34;&gt;#&lt;/a&gt; 读入无向图（邻接表）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;cpp&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void add(int &amp;amp; a, int &amp;amp; b)
&amp;#123;
    node* tmp = phead[a];
    if(tmp == nullptr)
    &amp;#123;
        tmp = new node;
        tmp-&amp;gt;val = b;
        phead[a] = tmp;
        ptail[a] = tmp;
    &amp;#125;
    else&amp;#123;
        tmp = new node;
        tmp-&amp;gt;val = b;
        ptail[a]-&amp;gt;next = tmp;
        ptail[a] = tmp;
    &amp;#125;

    tmp = phead[b];
    if(tmp == nullptr)
    &amp;#123;
        tmp = new node;
        tmp-&amp;gt;val = a;
        phead[b] = tmp;
        ptail[b] = tmp;
    &amp;#125;
    else&amp;#123;
        tmp = new node;
        tmp-&amp;gt;val = a;
        ptail[b]-&amp;gt;next = tmp;
        ptail[b] = tmp;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;dfs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dfs&#34;&gt;#&lt;/a&gt; DFS&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;cpp&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void DFS(int x)
&amp;#123;
    vis[x] = 1;
    node* t = phead[x];
    while(t != nullptr)
    &amp;#123;
        if(vis[t-&amp;gt;val] == 0) DFS(t-&amp;gt;val);
        t = t-&amp;gt;next;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;完整代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#完整代码&#34;&gt;#&lt;/a&gt; 完整代码&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;cpp&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;using namespace std;
class node
&amp;#123;
public:
    int val;
    node* next;
    node()&amp;#123;next = nullptr;&amp;#125;
&amp;#125;;

node* phead[50001] = &amp;#123;nullptr&amp;#125;;
node* ptail[50001] = &amp;#123;nullptr&amp;#125;;
int vis[50001] = &amp;#123;0&amp;#125;;

int n, m, v1, v2, cnt = 0;

void add(int &amp;amp; a, int &amp;amp; b)
&amp;#123;
    node* tmp = phead[a];
    if(tmp == nullptr)
    &amp;#123;
        tmp = new node;
        tmp-&amp;gt;val = b;
        phead[a] = tmp;
        ptail[a] = tmp;
    &amp;#125;
    else&amp;#123;
        tmp = new node;
        tmp-&amp;gt;val = b;
        ptail[a]-&amp;gt;next = tmp;
        ptail[a] = tmp;
    &amp;#125;

    tmp = phead[b];
    if(tmp == nullptr)
    &amp;#123;
        tmp = new node;
        tmp-&amp;gt;val = a;
        phead[b] = tmp;
        ptail[b] = tmp;
    &amp;#125;
    else&amp;#123;
        tmp = new node;
        tmp-&amp;gt;val = a;
        ptail[b]-&amp;gt;next = tmp;
        ptail[b] = tmp;
    &amp;#125;
&amp;#125;

void DFS(int x)
&amp;#123;
    vis[x] = 1;
    node* t = phead[x];
    while(t != nullptr)
    &amp;#123;
        if(vis[t-&amp;gt;val] == 0) DFS(t-&amp;gt;val);
        t = t-&amp;gt;next;
    &amp;#125;
&amp;#125;

int main()
&amp;#123;
    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    for(int i = 0; i &amp;lt;= m - 1; i++)
    &amp;#123;
        cin &amp;gt;&amp;gt; v1 &amp;gt;&amp;gt; v2;
        add(v1, v2);
    &amp;#125;
    for(int i = 1; i &amp;lt;= n; i++)
    &amp;#123;
        if(vis[i] == 0)
        &amp;#123;
            DFS(i);
            cnt++;
        &amp;#125;
    &amp;#125;
    cout &amp;lt;&amp;lt; cnt &amp;lt;&amp;lt; endl;
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;方法二并查集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法二并查集&#34;&gt;#&lt;/a&gt; &lt;strong&gt;方法二：并查集&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;使用 Kruskal 算法，用并查集存储每个节点的祖先，最后统计出不同祖先的个数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cpp&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;queue&amp;gt;using namespace std;

int cost_sum = 0;

int pre[50001];

int find(int x)
&amp;#123;
    if(pre[x] == x) return x;
    return pre[x] = find(pre[x]);
&amp;#125;

void join(int x, int y)
&amp;#123;
    int fx = find(x), fy = find(y);
    if(fx != fy)
        pre[fx] = fy;
&amp;#125;

struct edge
&amp;#123;
    int fr, to;
&amp;#125;;

queue&amp;lt;edge&amp;gt; list;

int main()
&amp;#123;
    int n, m;
    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;

    for(int i = 0; i &amp;lt;= n; i++)
    &amp;#123;
        pre[i] = i;
    &amp;#125;

    for(int i = 0 ; i&amp;lt;= m - 1 ; i++)
    &amp;#123;
        int tmp_fr, tmp_to;
        cin &amp;gt;&amp;gt; tmp_fr &amp;gt;&amp;gt; tmp_to;
        edge *Edge = new edge;
        Edge-&amp;gt;fr = tmp_fr;
        Edge-&amp;gt;to = tmp_to;
        list.push(*Edge);
    &amp;#125;

    while(!list.empty())
    &amp;#123;
        edge Edge = list.front();
        list.pop();
        int vex1 = Edge.fr;
        int vex2 = Edge.to;
        if(find(vex1) != find(vex2))
        &amp;#123;
            join(vex1, vex2);
        &amp;#125;
    &amp;#125;

    int cnt = 0;
    for(int i = 1; i &amp;lt;= n; i++)
    &amp;#123;
        if(find(i) == i) cnt++;
    &amp;#125;
    cout &amp;lt;&amp;lt; cnt &amp;lt;&amp;lt;endl;
    return 0;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;第二题整数拆分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二题整数拆分&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第二题：整数拆分&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;整数拆分是一个古老又有趣的问题。请给出将正整数 n 拆分成 k 个正整数的所有不重复方案。例如，将 5 拆分成 2 个正整数的不重复方案，有如下 2 组：(1，4) 和 (2，3)。注意 (1，4) 和 (4，1) 被视为同一方案。每种方案按递增序输出，所有方案按方案递增序输出。&lt;/p&gt;
&lt;h3 id=&#34;输入格式-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入格式-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;1 行，2 个整数 n 和 k，用空格分隔， 1≤k≤n≤50.&lt;/p&gt;
&lt;h3 id=&#34;输出格式-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出格式-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;若干行，每行一个拆分方案，方案中的数用空格分隔。最后一行，给出不同拆分方案的总数。&lt;/p&gt;
&lt;h3 id=&#34;输入样例-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入样例-3&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出一组输入。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;in&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;5 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;输出样例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出样例&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出相应的输出。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;out&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 4
2 3
2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;题目解析-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目解析-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;题目解析&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&#34;方法一回溯法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法一回溯法&#34;&gt;#&lt;/a&gt; &lt;strong&gt;方法一：回溯法&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&#34;代码实现-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码实现-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;代码实现&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;cpp&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;queue&amp;gt;#include &amp;lt;vector&amp;gt;using namespace std;

int n = 0;
int k = 0;
int cnt = 0;

vector&amp;lt;int&amp;gt; vec;

int solve(int x, int y, int q, int sum)
&amp;#123;
    //如果数字个数达到k个
    if (y == 0)
    &amp;#123;
        //如果sum恰好等于n，输出答案
        if (sum == n)
        &amp;#123;
            ++cnt;
            for (auto it = vec.begin(); it != vec.end(); ++it)
            &amp;#123;
                cout &amp;lt;&amp;lt; *it;
                if (it != vec.end())
                    cout &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
            &amp;#125;
            cout &amp;lt;&amp;lt; endl;
            return 0;
        &amp;#125;
        else
        &amp;#123;
            return 0;
        &amp;#125;
    &amp;#125;
    //重复方案的筛选，将大于等于q，小于等于x/y的每个数递归solve，保证每个组合元素递增
    for (int i = q; i &amp;lt;= x / y; ++i)
    &amp;#123;
        vec.push_back(i);
        solve(x - i, y - 1, i, sum + i);
        vec.pop_back();
    &amp;#125;
    return 0;
&amp;#125;

int main()
&amp;#123;
    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
    solve(n, k, 1, 0);
    cout &amp;lt;&amp;lt; cnt;
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;第三题旅行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第三题旅行&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第三题：旅行&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;五一要到了，来一场说走就走的旅行吧。当然，要关注旅行费用。由于从事计算机专业，你很容易就收集到一些城市之间的交通方式及相关费用。将所有城市编号为 1 到 n，你出发的城市编号是 s。你想知道，到其它城市的最小费用分别是多少。如果可能，你想途中多旅行一些城市，在最小费用情况下，到各个城市的途中最多能经过多少城市。&lt;/p&gt;
&lt;h3 id=&#34;输入格式-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入格式-3&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;第 1 行，3 个整数 n、m、s，用空格分隔，分别表示城市数、交通方式总数、出发城市编号， 1≤s≤n≤10000, 1≤m≤100000 。&lt;/p&gt;
&lt;p&gt;第 2 到 m+1 行，每行三个整数 u、v 和 w，用空格分隔，表示城市 u 和城市 v 的一种双向交通方式费用为 w ， 1≤w≤10000。&lt;/p&gt;
&lt;h3 id=&#34;输出格式-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出格式-3&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;第 1 行，若干个整数 Pi，用空格分隔，Pi 表示 s 能到达的城市 i 的最小费用，1≤i≤n，按城市号递增顺序。&lt;/p&gt;
&lt;p&gt;第 2 行，若干个整数 Ci，Ci 表示在最小费用情况下，s 到城市 i 的最多经过的城市数，1≤i≤n，按城市号递增顺序。&lt;/p&gt;
&lt;h3 id=&#34;输入样例-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入样例-4&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出一组输入。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;in&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;5 5 1
1 2 2
1 4 5
2 3 4
3 5 7
4 5 8
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;输出样例-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出样例-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出相应的输出。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;out&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0 2 6 5 13
0 1 2 1 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;题目解析-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目解析-3&#34;&gt;#&lt;/a&gt; &lt;strong&gt;题目解析&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;单元最短路问题，首先想到的是 Dijkstra。&lt;/p&gt;
&lt;p&gt;求最多经过的城市数，需要对 “三角形” 进行特判若 “两边之和等于第三边”，选择多经过一个城市的路径。&lt;/p&gt;
&lt;h3 id=&#34;方法一dijkstra&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法一dijkstra&#34;&gt;#&lt;/a&gt; &lt;strong&gt;方法一：Dijkstra&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&#34;代码实现-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码实现-3&#34;&gt;#&lt;/a&gt; &lt;strong&gt;代码实现&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;cpp&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;queue&amp;gt;#include &amp;lt;limit&amp;gt;using namespace std;

class node
&amp;#123;
public:
    int val;
    int cost;
    node *next;
    node() &amp;#123; next = nullptr; &amp;#125;
    node(int v, int c) &amp;#123; val = v, cost = c, next = nullptr; &amp;#125;
&amp;#125;;

class edge
&amp;#123;
public:
    int val;
    int cost;
    edge(int c, int v) &amp;#123; val = v, cost = c; &amp;#125;
    bool operator&amp;lt;(const edge &amp;amp;b) const
    &amp;#123;
        return cost &amp;gt; b.cost;
    &amp;#125;
&amp;#125;;

node *phead[10001] = &amp;#123;nullptr&amp;#125;;
node *ptail[10001] = &amp;#123;nullptr&amp;#125;;
int vis[10001] = &amp;#123;0&amp;#125;;
int citycnt[10001] = &amp;#123;0&amp;#125;;

int n, m, strt, v1, v2, cs;

priority_queue&amp;lt;edge&amp;gt; list;//通过优先队列进行优化

int main()
&amp;#123;
    scanf(&amp;quot;%d%d%d&amp;quot;, &amp;amp;n, &amp;amp;m, &amp;amp;strt);
    int *dist = new int[n + 1];
    for (int i = 0; i &amp;lt;= m - 1; i++)
    &amp;#123;
        scanf(&amp;quot;%d%d%d&amp;quot;, &amp;amp;v1, &amp;amp;v2, &amp;amp;cs);
        node *t = ptail[v1];
        if (t == nullptr)
        &amp;#123;
            phead[v1] = new node(v2, cs);
            ptail[v1] = phead[v1];
        &amp;#125;
        else
        &amp;#123;
            ptail[v1]-&amp;gt;next = new node(v2, cs);
            ptail[v1] = ptail[v1]-&amp;gt;next;
        &amp;#125;

        t = ptail[v2];
        if (t == nullptr)
        &amp;#123;
            phead[v2] = new node(v1, cs);
            ptail[v2] = phead[v2];
        &amp;#125;
        else
        &amp;#123;
            ptail[v2]-&amp;gt;next = new node(v1, cs);
            ptail[v2] = ptail[v2]-&amp;gt;next;
        &amp;#125;
    &amp;#125;
    for (int i = 0; i &amp;lt;= n; i++)
    &amp;#123;
        dist[i] = INT32_MAX;
    &amp;#125;
    dist[strt] = 0;
    list.push(edge(0, strt));
    while (!list.empty())
    &amp;#123;
        edge cur = list.top();
        list.pop();
        if (vis[cur.val] == 1)
            continue;
        else
            vis[cur.val] = 1;

        node *t = phead[cur.val];
        while (t != nullptr)
        &amp;#123;
            if (t-&amp;gt;cost + dist[cur.val] &amp;lt; dist[t-&amp;gt;val])
            &amp;#123;
                dist[t-&amp;gt;val] = t-&amp;gt;cost + dist[cur.val];
                list.push(edge(dist[t-&amp;gt;val], t-&amp;gt;val));
                citycnt[t-&amp;gt;val] = citycnt[cur.val] + 1;
            &amp;#125;
            else if (t-&amp;gt;cost + dist[cur.val] == dist[t-&amp;gt;val])
            &amp;#123;
                if (citycnt[t-&amp;gt;val] &amp;lt; citycnt[cur.val] + 1)
                    citycnt[t-&amp;gt;val] = citycnt[cur.val] + 1;
            &amp;#125;
            t = t-&amp;gt;next;
        &amp;#125;
    &amp;#125;
    for (int i = 1; i &amp;lt;= n; i++)
    &amp;#123;
        cout &amp;lt;&amp;lt; dist[i];
        if (i != n)
            cout &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
    &amp;#125;
    cout &amp;lt;&amp;lt; endl;
    for (int i = 1; i &amp;lt;= n; i++)
    &amp;#123;
        cout &amp;lt;&amp;lt; citycnt[i];
        if (i != n)
            cout &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
    &amp;#125;
    cout &amp;lt;&amp;lt; endl;

    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;第四题供电&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第四题供电&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第四题：供电&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;给 N 个地区供电。每个地区或者建一个供电站，或者修一条线道连接到其它有电的地区。试确定给 N 个地区都供上电的最小费用。&lt;/p&gt;
&lt;p&gt;要给 N 个地区供电。每个地区或者建一个供电站，或者修一条线道连接到其它有电的地区。试确定给 N 个地区都供上电的最小费用。&lt;/p&gt;
&lt;h3 id=&#34;输入格式-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入格式-4&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;第 1 行，两个个整数 N 和 M , 用空格分隔，分别表示地区数和修线路的方案数，1≤N≤10000，0≤M≤50000。&lt;/p&gt;
&lt;p&gt;第 2 行，包含 N 个用空格分隔的整数 P [i]，表示在第 i 个地区建一个供电站的代价，1 ≤P [i]≤ 100,000，1≤i≤N 。&lt;/p&gt;
&lt;p&gt;接下来 M 行，每行 3 个整数 a、b 和 c，用空格分隔，表示在地区 a 和 b 之间修一条线路的代价为 c，1 ≤ c ≤ 100,000，1≤a,b≤N 。&lt;/p&gt;
&lt;h3 id=&#34;输出格式-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出格式-4&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;一行，包含一个整数， 表示所求最小代价。&lt;/p&gt;
&lt;h3 id=&#34;输入样例-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入样例-5&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输入样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出一组输入。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;in&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4 6
5 4 4 3
1 2 2
1 3 2
1 4 2
2 3 3
2 4 3
3 4 4
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;输出样例-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出样例-3&#34;&gt;#&lt;/a&gt; &lt;strong&gt;输出样例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在这里给出相应的输出。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;out&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;题目解析-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目解析-4&#34;&gt;#&lt;/a&gt; &lt;strong&gt;题目解析&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;最小生成树问题，但是可以选择自己供电，即本题的图，既有点权，又有边权。可以选择点权化边权，然后使用最小生成树的相关算法完成。&lt;/p&gt;
&lt;h3 id=&#34;方法一kruskal&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法一kruskal&#34;&gt;#&lt;/a&gt; &lt;strong&gt;方法一：Kruskal&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&#34;代码实现-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码实现-4&#34;&gt;#&lt;/a&gt; &lt;strong&gt;代码实现&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;cpp&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;queue&amp;gt;using namespace std;

int cost_sum = 0;

int pre[10001];

int find(int x)
&amp;#123;
    if(pre[x] == x) return x;
    return pre[x] = find(pre[x]);
&amp;#125;

void join(int x, int y)
&amp;#123;
    int fx = find(x), fy = find(y);
    if(fx != fy)
        pre[fx] = fy;
&amp;#125;

struct edge
&amp;#123;
    int fr, to;
    int cost;

    bool operator &amp;gt;(const edge &amp;amp; b)const
    &amp;#123;
        return cost &amp;gt; b.cost;
    &amp;#125;
&amp;#125;;

priority_queue&amp;lt;edge,vector&amp;lt;edge&amp;gt;,greater&amp;lt;edge&amp;gt;&amp;gt; list;

int main()
&amp;#123;
    int n, m;
    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    pre[0] = 0;
    for(int i = 1; i &amp;lt;= n; i++)
    &amp;#123;
        int tmp_cost;
        cin &amp;gt;&amp;gt; tmp_cost;
        edge *Edge = new edge;
        Edge-&amp;gt;fr = 0;
        Edge-&amp;gt;to = i;
        Edge-&amp;gt;cost = tmp_cost;
        list.push(*Edge);
        pre[i] = i;
    &amp;#125;

    for(int i = 0 ; i&amp;lt;= m - 1 ; i++)
    &amp;#123;
        int tmp_fr, tmp_to, tmp_cost;
        cin &amp;gt;&amp;gt; tmp_fr &amp;gt;&amp;gt; tmp_to &amp;gt;&amp;gt; tmp_cost;
        edge *Edge = new edge;
        Edge-&amp;gt;fr = tmp_fr;
        Edge-&amp;gt;to = tmp_to;
        Edge-&amp;gt;cost = tmp_cost;
        list.push(*Edge);
    &amp;#125;
    int T = n + 1;
    while(T &amp;gt; 1)
    &amp;#123;
        edge Edge = list.top();
        list.pop();
        int vex1 = Edge.fr;
        int vex2 = Edge.to;
        int cost = Edge.cost;
        if(find(vex1) != find(vex2))
        &amp;#123;
            cost_sum += cost;
            join(vex1, vex2);
            T--;
        &amp;#125;
    &amp;#125;
    cout &amp;lt;&amp;lt; cost_sum &amp;lt;&amp;lt; endl;
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="编程" scheme="http://leomeng86.github.io/tags/%E7%BC%96%E7%A8%8B/" />
        <category term="数据结构" scheme="http://leomeng86.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" />
        <updated>2022-09-06T03:59:53.000Z</updated>
    </entry>
    <entry>
        <id>http://leomeng86.github.io/2022/09/06/C&amp;C++/CPP%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/</id>
        <title>CPP第一次上机实验</title>
        <link rel="alternate" href="http://leomeng86.github.io/2022/09/06/C&amp;C++/CPP%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
        <content type="html">&lt;h2 id=&#34;题目要求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目要求&#34;&gt;#&lt;/a&gt; &lt;strong&gt;题目要求&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;第一个题目要求利用位运算的知识&lt;/p&gt;
&lt;p&gt;并通过位运算的方式完成十进制加减乘法；&lt;/p&gt;
&lt;p&gt;第二个题目要求计算 1000！，结果超过两千位，远超 int 或者 long long 所能储存的值，应使用高精度乘法算法进行计算。&lt;/p&gt;
&lt;h2 id=&#34;主要流程及解决思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主要流程及解决思路&#34;&gt;#&lt;/a&gt; &lt;strong&gt;主要流程及解决思路&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;第一题：位运算共包括六种：与（&amp;amp;）， 或（|）， 非（~），异或（^）， 左移（&amp;lt;&amp;lt;）, 右移（&amp;gt;&amp;gt;）。左移和右移运算可进行快速乘 2，除 2 操作。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubm90aW9uLnNvLzJjZWQ4Njk3MzQzYjRlYmQ4ZDVhOTIyYWIxYzE4Nzll&#34;&gt;Untitled&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;根据该真值表可以进行位运算等操作。&lt;/p&gt;
&lt;p&gt;计算机通过补码进行运算，即无需考虑加负数的问题。根据上学期的数字逻辑知识，可知完成十进制加法器可以通过异或运算计算本位（异或运算当且仅当 a！=b 时值为 1），可计算出所有本位。再通过与运算计算出进位情况，当且仅当 a == 1 &amp;amp;&amp;amp; b == 1 时值为 1，符合运算进位的需求，此时进位保留在本位，应使用左移运算，完成进位操作，再循环进行进位与异或计算答案的异或，直到进位为 0；&lt;/p&gt;
&lt;p&gt;减法运算，通过补码运算法则，对数据进行取补码运算先取反再加 1，然后进行加法运算。乘法运算需要先判断 a 和 b 的正负，并转为正数，a*b，b 个 a 相加，通过循环，完成 b 个 a 的相加运算，最后进行正负的判断。&lt;/p&gt;
&lt;p&gt;第二题：高精度计算，通过 int 数组，每个 int 存一位数，通过 - 1 指示该位是否使用。&lt;/p&gt;
&lt;p&gt;高精度模拟了竖式计算法，完成按位相加后，需要维护数组的值在 0 到 9 之间。&lt;/p&gt;
&lt;p&gt;为操作方便，数据逆序存储，累乘操作需保存结果且乘数每次循环加 1，完成后逆序输出。&lt;/p&gt;
&lt;h2 id=&#34;程序难点以及我遇到的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序难点以及我遇到的问题&#34;&gt;#&lt;/a&gt; &lt;strong&gt;程序难点以及我遇到的问题&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;第一题：之前未曾学习有关位运算实现的相关知识，只有去年学习的数字逻辑电路的知识进行辅助，未了解 C++ 通过补码计算的规则，在进行加法运算时错误认为需要提前判断正负，导致减法运算时没有头绪。仔细完成相关知识学习之后，该问题迎刃而解。&lt;/p&gt;
&lt;p&gt;第二题：高精度加法和乘法的运用。&lt;/p&gt;
&lt;h2 id=&#34;程序的优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序的优缺点&#34;&gt;#&lt;/a&gt; &lt;strong&gt;程序的优缺点&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;第一题：设置了较为合理的操作选项，完成了六种位运算封装并测试和三种十进制运算，使用迭代计算，减少了递归调用的时间损耗，减少堆栈的占用。&lt;/p&gt;
&lt;p&gt;第二题：使用 int 存位，使函数书写变得简洁，使用 - 1 进行标识，方便了数位的判断，但使用 memset () 造成了时间的浪费。采用定长数组，在计算较小数的阶乘时，会造成空间的浪费。使用 int 存位相较于 char 存位，也造成了更大的浪费，若使用 vector 或者是 string 将进一步减少相关浪费。第一版将两个乘数全部使用高精度进行运算，浪费了空间和时间。在第二版中考虑到只有计算阶乘过程中第二个数不会出现爆 int 的情况，把第二个数直接以 int 形式乘到高精度数组中，然后进行数组维护，使程序更为简洁，提高了程序的效率。&lt;/p&gt;
&lt;h2 id=&#34;我的收获&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#我的收获&#34;&gt;#&lt;/a&gt; &lt;strong&gt;我的收获&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;进一步学习了位运算，学习 C/C++ 中接近底层的操作。巩固了高精度算法的运用，在编程过程中可以更多的考虑空间和时间的占用。在 debug 过程中有效利用 IDE 自带调试功能，以及在关键位置输出结果的方式，进行了函数的测试和使用。在 C 语言课程设计过程中学习的相关开发知识，进一步得到夯实，由过程化编程，进一步学习了面向对象的思想，巩固了类封装的相关知识。希望今后可以进一步提升自己编程能力，进一步优化程序。&lt;/p&gt;
&lt;h2 id=&#34;代码实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码实现&#34;&gt;#&lt;/a&gt; &lt;strong&gt;代码实现&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0xlb01lbmc4Ni9DcHBfZXhwZXJpbWVudC5naXQ=&#34;&gt;https://github.com/LeoMeng86/Cpp_experiment.git&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
        <category term="编程" scheme="http://leomeng86.github.io/tags/%E7%BC%96%E7%A8%8B/" />
        <category term="CPP" scheme="http://leomeng86.github.io/tags/CPP/" />
        <updated>2022-09-06T03:51:41.000Z</updated>
    </entry>
</feed>

{
    "version": "https://jsonfeed.org/version/1",
    "title": "一梦空间",
    "subtitle": "路漫漫其修远兮，吾将上下而求索",
    "icon": "http://leomeng86.github.io/images/favicon.ico",
    "description": "欢迎来带一梦空间",
    "home_page_url": "http://leomeng86.github.io",
    "items": [
        {
            "id": "http://leomeng86.github.io/2022/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/",
            "url": "http://leomeng86.github.io/2022/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/",
            "title": "数据结构第六次上机实验",
            "date_published": "2022-09-06T04:02:32.000Z",
            "content_html": "<h2 id=\"第一题稀疏矩阵之差\"><a class=\"anchor\" href=\"#第一题稀疏矩阵之差\">#</a> <strong>第一题：稀疏矩阵之差</strong></h2>\n<p>矩阵 A 和 B 都是稀疏矩阵。请计算矩阵的差 A-B. 如果 A、B 不能计算差值，输出”Illegal!”</p>\n<h3 id=\"输入格式\"><a class=\"anchor\" href=\"#输入格式\">#</a> <strong>输入格式</strong></h3>\n<p>矩阵的输入采用三元组表示，先 A 后 B。对每个矩阵：</p>\n<p>第 1 行，3 个整数 N、M、t，用空格分隔，分别表示矩阵的行数、列数和非 0 数据项数，10≤N、M≤50000，t≤min (N,M).</p>\n<p>第 2 至 t+1 行，每行 3 个整数 r、c、v，用空格分隔，表示矩阵 r 行 c 列的位置是非 0 数据项 v, v 在 32 位有符号整型范围内。三元组默认按行列排序。</p>\n<h3 id=\"输出格式\"><a class=\"anchor\" href=\"#输出格式\">#</a> <strong>输出格式</strong></h3>\n<p>矩阵 A-B，采用三元组表示，默认按行列排序，非零项也在 32 位有符号整型范围内。</p>\n<h3 id=\"输入样例\"><a class=\"anchor\" href=\"#输入样例\">#</a> <strong>输入样例</strong></h3>\n<p>在这里给出一组输入。例如：</p>\n<p><strong>in</strong></p>\n<pre><code>10 10 3\n2 2 2\n5 5 5\n10 10 20\n10 10 2\n2 2 1\n6 6 6\n</code></pre>\n<h3 id=\"输出样例\"><a class=\"anchor\" href=\"#输出样例\">#</a> <strong>输出样例</strong></h3>\n<p>在这里给出相应的输出。例如：</p>\n<p><strong>out</strong></p>\n<pre><code>10 10 4\n2 2 1\n5 5 5\n6 6 -6\n10 10 20\n</code></pre>\n<h3 id=\"题目解析\"><a class=\"anchor\" href=\"#题目解析\">#</a> <strong>题目解析</strong></h3>\n<h3 id=\"方法一归并\"><a class=\"anchor\" href=\"#方法一归并\">#</a> <strong>方法一：归并</strong></h3>\n<p>注意到题目给出的三元组已经按照行列排序，且输出要求也要求按照行列顺序，这里使用一个归并的方法，如果第一个矩阵的三元组小于第二个的，直接储存第一个，如果相等，输出相减后储存，如果第二个矩阵的三元组位置较小，储存第二个矩阵的相反数。</p>\n<p>里面有一个坑，相减后可能出现 0 的情况，一旦出现结果零，即不储存。</p>\n<p><strong>cpp</strong></p>\n<pre><code>#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;using namespace std;\nint main()\n&#123;\n    int CNT;\n    vector&lt;pair&lt;pair&lt;int, int&gt;, int&gt;&gt; a, b, c;\n    int n, m, cnt;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; cnt;\n    CNT = cnt;\n    while (cnt--)\n    &#123;\n        int tn, tm, val;\n        cin &gt;&gt; tn &gt;&gt; tm &gt;&gt; val;\n        auto tmp = pair&lt;int, int&gt;(tn, tm);\n        a.push_back(pair&lt;pair&lt;int, int&gt;, int&gt;(tmp, val));\n    &#125;\n    int n2, m2, cnt2;\n    cin &gt;&gt; n2 &gt;&gt; m2 &gt;&gt; cnt2;\n    CNT += cnt2;\n    if (n2 != n || m != m2)\n    &#123;\n        cout &lt;&lt; &quot;Illegal!&quot;;\n        return 0;\n    &#125;\n    while (cnt2--)\n    &#123;\n        int tn, tm, val;\n        cin &gt;&gt; tn &gt;&gt; tm &gt;&gt; val;\n        auto tmp = pair&lt;int, int&gt;(tn, tm);\n        b.push_back(pair&lt;pair&lt;int, int&gt;, int&gt;(tmp, val));\n    &#125;\n    auto t1 = a.begin();\n    auto t2 = b.begin();\n    while (t1 != a.end() &amp;&amp; t2 != b.end())\n    &#123;\n        if (t1-&gt;first.first == t2-&gt;first.first)\n        &#123;\n            if (t2-&gt;first.second == t1-&gt;first.second)\n            &#123;\n                auto tmp = pair&lt;int, int&gt;(t1-&gt;first.first, t1-&gt;first.second);\n                if (t1-&gt;second - t2-&gt;second != 0)\n                    c.push_back(pair&lt;pair&lt;int, int&gt;, int&gt;(tmp, t1-&gt;second - t2-&gt;second));\n                else\n                &#123;\n                    CNT--;\n                &#125;\n                t1++, t2++;\n                CNT--;\n            &#125;\n            else if (t1-&gt;first.second &lt; t2-&gt;first.second)\n            &#123;\n                auto tmp = pair&lt;int, int&gt;(t1-&gt;first.first, t1-&gt;first.second);\n                c.push_back(pair&lt;pair&lt;int, int&gt;, int&gt;(tmp, t1-&gt;second));\n                t1++;\n            &#125;\n            else if (t1-&gt;first.second &gt; t2-&gt;first.second)\n            &#123;\n                auto tmp = pair&lt;int, int&gt;(t2-&gt;first.first, t2-&gt;first.second);\n                c.push_back(pair&lt;pair&lt;int, int&gt;, int&gt;(tmp, -t2-&gt;second));\n                t2++;\n            &#125;\n        &#125;\n        else if (t1-&gt;first.first &lt; t2-&gt;first.first)\n        &#123;\n            auto tmp = pair&lt;int, int&gt;(t1-&gt;first.first, t1-&gt;first.second);\n            c.push_back(pair&lt;pair&lt;int, int&gt;, int&gt;(tmp, t1-&gt;second));\n            t1++;\n        &#125;\n        else if (t1-&gt;first.first &gt; t2-&gt;first.first)\n        &#123;\n            auto tmp = pair&lt;int, int&gt;(t2-&gt;first.first, t2-&gt;first.second);\n            c.push_back(pair&lt;pair&lt;int, int&gt;, int&gt;(tmp, -t2-&gt;second));\n            t2++;\n        &#125;\n    &#125;\n    while (t2 != b.end())\n    &#123;\n        auto tmp = pair&lt;int, int&gt;(t2-&gt;first.first, t2-&gt;first.second);\n        c.push_back(pair&lt;pair&lt;int, int&gt;, int&gt;(tmp, -t2-&gt;second));\n        t2++;\n    &#125;\n    while (t1 != a.end())\n    &#123;\n        auto tmp = pair&lt;int, int&gt;(t1-&gt;first.first, t1-&gt;first.second);\n        c.push_back(pair&lt;pair&lt;int, int&gt;, int&gt;(tmp, t1-&gt;second));\n        t1++;\n    &#125;\n    auto it = c.begin();\n    cout &lt;&lt; n &lt;&lt; &quot; &quot; &lt;&lt; m &lt;&lt; &quot; &quot; &lt;&lt; CNT &lt;&lt; &quot;\\n&quot;;\n    while (it != c.end())\n    &#123;\n        cout &lt;&lt; it-&gt;first.first &lt;&lt; &quot; &quot; &lt;&lt; it-&gt;first.second &lt;&lt; &quot; &quot; &lt;&lt; it-&gt;second;\n        if (it + 1 != c.end())\n            cout &lt;&lt; &quot;\\n&quot;;\n        it++;\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"第二题二叉树的最短路径长\"><a class=\"anchor\" href=\"#第二题二叉树的最短路径长\">#</a> <strong>第二题：二叉树的最短路径长</strong></h2>\n<p>给定一棵二叉树 T，每个结点赋一个权值。计算从根结点到所有结点的最短路径长度。路径长度定义为：路径上的每个顶点的权值和。</p>\n<h3 id=\"输入格式-2\"><a class=\"anchor\" href=\"#输入格式-2\">#</a> <strong>输入格式</strong></h3>\n<p>第 1 行，1 个整数 n，表示二叉树 T 的结点数，结点编号 1..n，1≤n≤20000。</p>\n<p>第 2 行，n 个整数，空格分隔，表示 T 的先根序列，序列中结点用编号表示。</p>\n<p>第 3 行，n 个整数，空格分隔，表示 T 的中根序列，序列中结点用编号表示。</p>\n<p>第 4 行，n 个整数 Wi，空格分隔，表示 T 中结点的权值，-10000≤Wi≤10000，1≤i≤n。</p>\n<h3 id=\"输出格式-2\"><a class=\"anchor\" href=\"#输出格式-2\">#</a> <strong>输出格式</strong></h3>\n<p>1 行，n 个整数，表示根结点到其它所有结点的最短路径长度。</p>\n<h3 id=\"输入样例-2\"><a class=\"anchor\" href=\"#输入样例-2\">#</a> <strong>输入样例</strong></h3>\n<p>在这里给出一组输入。例如：</p>\n<p><strong>in</strong></p>\n<pre><code>4\n1 2 4 3\n4 2 1 3\n1 -1 2 3\n</code></pre>\n<h3 id=\"输出样例-2\"><a class=\"anchor\" href=\"#输出样例-2\">#</a> <strong>输出样例</strong></h3>\n<p>在这里给出相应的输出。例如：</p>\n<p><strong>out</strong></p>\n<pre><code>1 0 3 3\n</code></pre>\n<h3 id=\"题目解析-2\"><a class=\"anchor\" href=\"#题目解析-2\">#</a> <strong>题目解析</strong></h3>\n<p>使用中根序列和先跟序列递归建树，然后 DFS 更新每个节点的最短路径长度。</p>\n<p><strong>cpp</strong></p>\n<pre><code>#include &lt;iostream&gt;using namespace std;\n\nint _val[20001];\nint result[20001] = &#123;0&#125;;\n\nstruct node\n&#123;\n    int val;\n    node *left;\n    node *right;\n&#125;;\n\nnode *build(int *pre, int *in, int size)\n&#123;\n    if (size &lt;= 0)\n        return nullptr;\n\n    int i;\n    for (i = 0; i &lt;= size - 1; i++)\n    &#123;\n        if (in[i] == pre[0])\n            break;\n    &#125;\n\n    node *tree = new node;\n    tree-&gt;val = pre[0];\n    tree-&gt;left = build(pre + 1, in, i);\n    tree-&gt;right = build(pre + i + 1, in + i + 1, size - 1 - i);\n    return tree;\n&#125;\n\nvoid DFS(node * root, int cost)\n&#123;\n    if(root == nullptr) return;\n    result[root-&gt;val] = cost + _val[root-&gt;val];\n    DFS(root-&gt;left, result[root-&gt;val]);\n    DFS(root-&gt;right, result[root-&gt;val]);\n&#125;\n\nint main()\n&#123;\n    int n;\n    scanf(&quot;%d&quot;, &amp;n);\n    int _pre[20001], _in[20001];\n\n    for(int i = 0; i &lt;= n - 1; i++)\n    &#123;\n        scanf(&quot;%d&quot;, &amp;_pre[i]);\n    &#125;\n\n    for(int i = 0; i &lt;= n - 1; i++)\n    &#123;\n        scanf(&quot;%d&quot;, &amp;_in[i]);\n    &#125;\n\n    for(int i = 1; i &lt;= n; i++)\n    &#123;\n        scanf(&quot;%d&quot;, &amp;_val[i]);\n    &#125;\n\n    node* root = build(_pre,_in,n);\n\n    DFS(root, 0);\n\n    for(int i = 1; i &lt;= n; i++)\n    &#123;\n        printf(&quot;%d&quot;, result[i]);\n        if(i != n) printf(&quot; &quot;);\n    &#125;\n    printf(&quot;\\n&quot;);\n&#125;\n</code></pre>\n<h3 id=\"第三题文字编辑\"><a class=\"anchor\" href=\"#第三题文字编辑\">#</a> <strong>第三题：文字编辑</strong></h3>\n<p>一篇文章由 n 个汉字构成，汉字从前到后依次编号为 1，2，……，n。有四种操作：</p>\n<p>A i j 表示把编号为 i 的汉字移动编号为 j 的汉字之前；</p>\n<p>B i j 表示把编号为 i 的汉字移动编号为 j 的汉字之后；</p>\n<p>Q 0 i 为询问编号为 i 的汉字之前的汉字的编号；</p>\n<p>Q 1 i 为询问编号为 i 的汉字之后的汉字的编号。</p>\n<p>规定：1 号汉字之前是 n 号汉字，n 号汉字之后是 1 号汉字。</p>\n<h3 id=\"输入格式-3\"><a class=\"anchor\" href=\"#输入格式-3\">#</a> <strong>输入格式</strong></h3>\n<p>第 1 行，1 个整数 T，表示有 T 组测试数据， 1≤T≤9999.</p>\n<p>随后的每一组测试数据中，第 1 行两个整数 n 和 m，用空格分隔，分别代表汉字数和操作数，2≤n≤9999，1≤m≤9999；第 2 至 m+1 行，每行包含 3 个常量 s、i 和 j，用空格分隔，s 代表操作的类型，若 s 为 A 或 B，则 i 和 j 表示汉字的编号，若 s 为 Q，i 代表 0 或 1，j 代表汉字的编号。</p>\n<h3 id=\"输出格式-3\"><a class=\"anchor\" href=\"#输出格式-3\">#</a> <strong>输出格式</strong></h3>\n<p>若干行，每行 1 个整数，对应每个询问的结果汉字编号。</p>\n<h3 id=\"输入样例-3\"><a class=\"anchor\" href=\"#输入样例-3\">#</a> <strong>输入样例</strong></h3>\n<p>在这里给出一组输入。例如：</p>\n<p><strong>in</strong></p>\n<pre><code>1\n9999 4\nB 1 2\nA 3 9999\nQ 1 1\nQ 0 3\n</code></pre>\n<h3 id=\"输出样例-3\"><a class=\"anchor\" href=\"#输出样例-3\">#</a> <strong>输出样例</strong></h3>\n<p>在这里给出相应的输出。例如：</p>\n<p><strong>out</strong></p>\n<pre><code>4\n9998\n</code></pre>\n<h3 id=\"题目解析-3\"><a class=\"anchor\" href=\"#题目解析-3\">#</a> <strong>题目解析</strong></h3>\n<h3 id=\"方法一跳舞链\"><a class=\"anchor\" href=\"#方法一跳舞链\">#</a> <strong>方法一：跳舞链</strong></h3>\n<p>实现定点插入，定点查询，定点删除，且能满足 1000ms 的时间限制，使用跳舞链会比较合适。</p>\n<p>本题使用静态链表实现，会比较好写。</p>\n<p><strong>cpp</strong></p>\n<pre><code>#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;\nint main()\n&#123;\n    int T;\n    scanf(&quot;%d&quot;, &amp;T);\n    int pre[100001];\n    int nxt[100001];\n    int n, m;\n    for (register int j = 0; j &lt;= T - 1; j++)\n    &#123;\n        scanf(&quot;%d%d&quot;, &amp;n, &amp;m);\n        for (register int i = 1; i &lt;= n; i++)\n        &#123;\n\n            pre[i] = i - 1;\n            nxt[i] = i + 1;\n        &#125;\n        pre[1] = n;\n        nxt[n] = 1;\n        for (register int k = 0; k &lt;= m - 1; k++)\n        &#123;\n            char ch;\n            int op1, op2;\n            cin &gt;&gt; ch;\n            scanf(&quot;%d%d&quot;, &amp;op1, &amp;op2);\n            switch (ch)\n            &#123;\n            case 'A':\n            &#123;\n                nxt[pre[op1]] = nxt[op1];\n                pre[nxt[op1]] = pre[op1];\n                pre[op1] = pre[op2];\n                nxt[op1] = op2;\n                nxt[pre[op2]] = op1;\n                pre[op2] = op1;\n                break;\n            &#125;\n            case 'B':\n            &#123;\n                nxt[pre[op1]] = nxt[op1];\n                pre[nxt[op1]] = pre[op1];\n                pre[op1] = op2;\n                nxt[op1] = nxt[op2];\n                pre[nxt[op2]] = op1;\n                nxt[op2] = op1;\n                break;\n            &#125;\n            case 'Q':\n            &#123;\n                switch (op1)\n                &#123;\n                case 0:\n                &#123;\n                    printf(&quot;%d\\n&quot;, pre[op2]);\n                    break;\n                &#125;\n                case 1:\n                &#123;\n                    printf(&quot;%d\\n&quot;, nxt[op2]);\n                    break;\n                &#125;\n                &#125;\n                break;\n            &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"第四题方案计数\"><a class=\"anchor\" href=\"#第四题方案计数\">#</a> <strong>第四题：方案计数</strong></h3>\n<p>组装一个产品需要 n 个零件。生产每个零件都需花费一定的时间。零件的生产可以并行进行。有些零件的生产有先后关系，只有一个零件的之前的所有零件都生产完毕，才能开始生产这个零件。如何合理安排工序，才能在最少的时间内完成所有零件的生产。在保证最少时间情况下，关键方案有多少种，关键方案是指从生产开始时间到结束时间的一个零件生产序列，序列中相邻两个零件的关系属于事先给出的零件间先后关系的集合，序列中的每一个零件的生产都不能延期。</p>\n<h3 id=\"输入格式-4\"><a class=\"anchor\" href=\"#输入格式-4\">#</a> <strong>输入格式</strong></h3>\n<p>第 1 行，2 个整数 n 和 m，用空格分隔，分别表示零件数和关系数，零件编号 1..n，1≤n≤10000, 0≤m≤100000 。</p>\n<p>第 2 行，n 个整数 Ti，用空格分隔，表示零件 i 的生产时间，1≤i≤n，1≤Ti≤100 。</p>\n<p>第 3 到 m+2 行，每行两个整数 i 和 j，用空格分隔，表示零件 i 要在零件 j 之前生产。</p>\n<h3 id=\"输出格式-4\"><a class=\"anchor\" href=\"#输出格式-4\">#</a> <strong>输出格式</strong></h3>\n<p>第 1 行，1 个整数，完成生产的最少时间。</p>\n<p>第 2 行，1 个整数，关键方案数，最多 100 位。</p>\n<p>如果生产不能完成，只输出 1 行，包含 1 个整数 0.</p>\n<h3 id=\"输入样例-4\"><a class=\"anchor\" href=\"#输入样例-4\">#</a> <strong>输入样例</strong></h3>\n<p>在这里给出一组输入。例如：</p>\n<p><strong>in</strong></p>\n<pre><code>4 4\n1 2 2 1\n1 2\n1 3\n2 4\n3 4\n</code></pre>\n<h3 id=\"输出样例-4\"><a class=\"anchor\" href=\"#输出样例-4\">#</a> <strong>输出样例</strong></h3>\n<p>在这里给出相应的输出。例如：</p>\n<p><strong>out</strong></p>\n<pre><code>4\n2\n</code></pre>\n<h3 id=\"题目解析-4\"><a class=\"anchor\" href=\"#题目解析-4\">#</a> <strong>题目解析</strong></h3>\n<h3 id=\"方法一拓扑排序关键路径高精度\"><a class=\"anchor\" href=\"#方法一拓扑排序关键路径高精度\">#</a> <strong>方法一：拓扑排序 + 关键路径 + 高精度</strong></h3>\n<p>感谢 mxgg，上次有一个题目一直段错误，mxgg 发现是我爆了 int，建议我以后 #define int long long, 我说以后不是 BigInteger 我都不用，然后就机缘巧合向大佬学习写了 BigInt 的板子，mxgg yyds！！！</p>\n<p>除了需要高精度，读图时候，需要点权推到边权上，并把入度为 0 的点引到虚源，出度为 0 的点汇到虚源上，形成连通图，然后拓扑排序和关键路径算法。</p>\n<p>对于我这种蒟蒻，存板子就是我白月光！！！膜拜手拍大佬！！！</p>\n<p><strong>cpp</strong></p>\n<pre><code>#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;limits&gt;#include&lt;queue&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;using namespace std;\n\nclass Bigint\n&#123;\nprivate:\n    vector&lt;int&gt; content;\npublic:\n    Bigint();\n    Bigint(long long origin);\n    Bigint(const Bigint&amp; b);\n    ~Bigint();\n    unsigned long long size() const;\n    Bigint operator+(const Bigint&amp; b);\n    Bigint&amp; operator=(const Bigint&amp; b);\n    void resize(unsigned long long n);\n    const int&amp; operator[](unsigned long long i)const;\n    int&amp; operator[](unsigned long long i);\n    string toString();\n&#125;;\n\nBigint::Bigint()&#123;\n    content.reserve(128);\n    for (int i = 0; i &lt; 128; ++i)&#123;\n        content.push_back(0);\n    &#125;\n\n&#125;\n\nBigint::Bigint(long long origin)&#123;\n    content.reserve(128);\n    while (origin&gt;0)\n    &#123;\n        content.push_back(origin%10);\n        origin=origin/10;\n    &#125;\n&#125;\nBigint::Bigint(const Bigint&amp; b)&#123;\n    content.clear();\n    for(int i=0;i&lt;b.size();++i)&#123;\n        content.push_back(b[i]);\n    &#125;\n&#125;\n\nBigint::~Bigint()&#123;\n    content.clear();\n&#125;\n\nBigint Bigint::operator+(const Bigint&amp; b)&#123;\n    Bigint t;\n    Bigint res;\n    unsigned long long maxsize=max(this-&gt;size(),b.size());\n    t.resize(maxsize+1);\n    res.resize(maxsize+1);\n    for (int i = 0; i &lt; maxsize; ++i)&#123;\n        int num1=i&lt;this-&gt;size()?content[i]:0;\n        int num2=i&lt;b.size()?b[i]:0;\n        res[i]=(num1+num2+t[i])%10;\n        t[i+1]=(num1+num2+t[i])/10;\n    &#125;\n    if(t[maxsize]!=0)&#123;\n        res[maxsize]=t[maxsize];\n    &#125;else&#123;\n        res.resize(maxsize);\n    &#125;\n    return res;\n&#125;\n\nBigint&amp; Bigint::operator=(const Bigint&amp; b)&#123;\n    if(this==&amp;b)&#123;\n        return *this;\n    &#125;else&#123;\n        content.clear();\n        content.reserve(b.size());\n        for(int i=0;i&lt;b.size();++i)&#123;\n            content.push_back(b[i]);\n        &#125;\n    &#125;\n    return *this;\n&#125;\n\nunsigned long long Bigint::size()const&#123;\n        return content.size();\n&#125;\n\nconst int&amp; Bigint::operator[](unsigned long long i)const&#123;\n    if(i&gt;content.size())return *content.end();\n    return (*(content.begin()+i));\n&#125;\n\nint&amp; Bigint::operator[](unsigned long long i)&#123;\n    if(i&gt;content.size())return *content.end();\n    return (*(content.begin()+i));\n&#125;\n\nvoid Bigint::resize(unsigned long long n)&#123;\n    if(n&gt;this-&gt;size())&#123;\n        for (unsigned long long i = this-&gt;size(); i &lt;n; ++i)&#123;\n            content.push_back(0);\n        &#125;\n    &#125;else&#123;\n        for (unsigned long long i = this-&gt;size(); i&gt;n; --i)&#123;\n            content.pop_back();\n        &#125;\n    &#125;\n&#125;\n\nstring Bigint::toString()&#123;\n    bool flag=true;\n    string res;\n    for (int i = this-&gt;size()-1; i &gt;=0; --i)&#123;\n        if(flag&amp;&amp;content[i]==0)&#123;\n            continue;\n        &#125;else&#123;\n            if(flag&amp;&amp;content[i]!=0)&#123;\n                flag=false;\n            &#125;\n            res.push_back(content[i]+48);\n        &#125;\n    &#125;\n    if(flag)res.push_back('0');\n    return res;\n&#125;\n\nconst int maxn = 10010;\nint n = 0, m = 0;\n\nint inDu[maxn] = &#123;0&#125;;\nint inDu_bfs[maxn] = &#123;0&#125;;\nint outDu[maxn] = &#123;0&#125;;\nint es[maxn] = &#123;0&#125;;\nint ls[maxn];\nint cs[maxn] = &#123;0&#125;;\n\nstruct Node\n&#123;\n    Node* nxt;\n    int val;\n    int cost;\n    Node(int _val = 0, int _cost = 0)\n    &#123;\n        cost = _cost;\n        val = _val;\n        nxt = nullptr;\n    &#125;\n&#125;;\n\nNode *phead[maxn] = &#123;nullptr&#125;, *ptail[maxn] = &#123;nullptr&#125;;\n\nvoid add(int _fr, int _to, int _cost)\n&#123;\n    Node *t = ptail[_fr];\n    if (t == nullptr)\n    &#123;\n        phead[_fr] = new Node(_to,_cost);\n        ptail[_fr] = phead[_fr];\n    &#125;\n    else\n    &#123;\n        ptail[_fr]-&gt;nxt = new Node(_to, _cost);\n        ptail[_fr] = ptail[_fr]-&gt;nxt;\n    &#125;\n    outDu[_fr]++;\n    inDu[_to]++;\n    inDu_bfs[_to]++;\n\n&#125;\n\nvoid read_map()\n&#123;\n    for(int i = 1; i &lt;= n ; i++)\n    &#123;\n        scanf(&quot;%d&quot;, &amp;cs[i]);\n    &#125;\n    int _fr = 0, _to = 0;\n    for(int i  = 0; i &lt;= m - 1; i++)\n    &#123;\n        scanf(&quot;%d%d&quot;, &amp;_fr, &amp;_to);\n        add(_fr, _to, cs[_to]);\n    &#125;\n\n    for(int i = 1; i &lt;= n; i++)\n    &#123;\n        if(inDu[i] == 0)\n        &#123;\n            add(0,i,cs[i]);\n        &#125;\n        if(outDu[i] == 0)\n        &#123;\n            add(i, n + 1, 0);\n        &#125;\n    &#125;\n&#125;\n\nvector&lt;int&gt; topo_result;\nvoid topo()\n&#123;\n    queue&lt;int&gt; q;\n    topo_result.reserve(maxn);\n    q.push(0);\n    while(!q.empty())\n    &#123;\n        int now = q.front();\n        q.pop();\n        topo_result.push_back(now);\n        for(auto it = phead[now]; it!= nullptr; it= it-&gt;nxt)\n        &#123;\n            int to = it-&gt;val;\n            int cost = it-&gt;cost;\n            inDu[to]--;\n            if(inDu[to] == 0)\n            &#123;\n                q.push(to);\n            &#125;\n            es[to] = max(es[now] + cost, es[to]);\n        &#125;\n    &#125;\n&#125;\n\nvoid Cpath()\n&#123;\n    topo();\n    ls[n+1] = es[n+1];\n    for(int i = topo_result.size() - 1; i &gt;= 0; i--)\n    &#123;\n        int now = topo_result[i];\n        for(auto it = phead[now]; it != nullptr; it = it-&gt;nxt)\n        &#123;\n            int to = it-&gt;val;\n            int cost = it-&gt;cost;\n            ls[now] = min(ls[to]-cost, ls[now]);\n        &#125;\n    &#125;\n&#125;\n\nBigint tmp[maxn];\nBigint res;\nint vis[maxn] = &#123;0&#125;;\n\nvoid bfs(int x)\n&#123;\n    queue&lt;int&gt; q;\n    q.push(x);\n    vis[x] = 1;\n    while(!q.empty())\n    &#123;\n        int now = q.front();\n        q.pop();\n        vis[now] = 1;\n        for(auto it = phead[now]; it != nullptr; it = it-&gt;nxt)\n        &#123;\n            int to = it-&gt;val;\n            inDu_bfs[to]--;\n            if(es[to] == ls[to])\n            &#123;\n                tmp[to] = tmp[now] + tmp[to];\n            &#125;\n            if(inDu_bfs[to] == 0)\n            &#123;\n                q.push(to);\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\nint main()\n&#123;\n    for(int i = 0; i &lt;= maxn - 1; i++)\n    &#123;\n        ls[i] = INT32_MAX;\n    &#125;\n    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);\n    read_map();\n    Cpath();\n    tmp[0] = 1;\n    bfs(0);\n    long long result = es[n+1];\n    res = tmp[n+1];\n    if(res.toString() != &quot;0&quot;) cout &lt;&lt; result &lt;&lt;endl;\n    cout &lt;&lt; res.toString() &lt;&lt; endl;\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "编程",
                "数据结构"
            ]
        },
        {
            "id": "http://leomeng86.github.io/2022/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/",
            "url": "http://leomeng86.github.io/2022/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/",
            "title": "数据结构第五次上机实验",
            "date_published": "2022-09-06T04:02:18.000Z",
            "content_html": "<h2 id=\"第一题重复计数\"><a class=\"anchor\" href=\"#第一题重复计数\">#</a> <strong>第一题：重复计数</strong></h2>\n<p>在一个有限的正整数序列中，有些数会多次重复出现。请你统计每个数的出现次数，然后按数字在序列中第一次出现的位置顺序输出数及其次数。</p>\n<h3 id=\"输入格式\"><a class=\"anchor\" href=\"#输入格式\">#</a> <strong>输入格式</strong></h3>\n<p>第 1 行，1 个整数 N，表示整数的个数，(1≤N≤50000)。</p>\n<p>第 2 行，N 个正整数，每个整数 x 都满足 1 ≤ x ≤2000000000。</p>\n<h3 id=\"输出格式\"><a class=\"anchor\" href=\"#输出格式\">#</a> <strong>输出格式</strong></h3>\n<p>若干行，每行两个用一个空格隔开的数，第一个是数列中出现的数，第二个是该数在序列中出现的次数。</p>\n<h3 id=\"输入样例\"><a class=\"anchor\" href=\"#输入样例\">#</a> <strong>输入样例</strong></h3>\n<p>在这里给出一组输入。例如：</p>\n<p><strong>in</strong></p>\n<pre><code>12\n8 2 8 2 2 11 1 1 8 1 13 13\n</code></pre>\n<h3 id=\"输出样例\"><a class=\"anchor\" href=\"#输出样例\">#</a> <strong>输出样例</strong></h3>\n<p>在这里给出相应的输出。例如：</p>\n<p><strong>out</strong></p>\n<pre><code>8 3\n2 3\n11 1\n1 3\n13 2\n</code></pre>\n<h3 id=\"题目解析\"><a class=\"anchor\" href=\"#题目解析\">#</a> <strong>题目解析</strong></h3>\n<h3 id=\"方法一stl\"><a class=\"anchor\" href=\"#方法一stl\">#</a> <strong>方法一：STL</strong></h3>\n<p>STL 大法好，map 的 find 时间复杂度是 log 级别，找到了会返回目标的迭代器，找不到会返回 end ()，然后用一个 queue 来存顺序，STL 我的神！！！</p>\n<h3 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> <strong>代码实现：</strong></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> Q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">==</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            m<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">pair</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            it<span class=\"token operator\">-></span>second<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        Q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        m<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"第二题字符串周期\"><a class=\"anchor\" href=\"#第二题字符串周期\">#</a> <strong>第二题：字符串周期</strong></h2>\n<p>一个字符串可以看成由某个长度为 k 的前缀重复若干次得到，称 k 为该字符串的周期。例如：”abababab” 以 2、4、8 为周期。请计算一个字符串的最小周期。</p>\n<h3 id=\"输入格式-2\"><a class=\"anchor\" href=\"#输入格式-2\">#</a> <strong>输入格式</strong></h3>\n<p>输入包含多行。每行包含一个字符串 s，s 至少 1 个字符，最多 1000000 个字符。最后一行是一个点，表示输入结束，不必求解。输入较大，建议使用 scanf。</p>\n<h3 id=\"输出格式-2\"><a class=\"anchor\" href=\"#输出格式-2\">#</a> <strong>输出格式</strong></h3>\n<p>多行，每行一个整数，对应每一行输入 s 的最小周期。</p>\n<h3 id=\"输入样例-2\"><a class=\"anchor\" href=\"#输入样例-2\">#</a> <strong>输入样例</strong></h3>\n<p>在这里给出一组输入。例如：</p>\n<pre><code>abcd\naaaa\nababab\n.\n</code></pre>\n<h3 id=\"输出样例-2\"><a class=\"anchor\" href=\"#输出样例-2\">#</a> <strong>输出样例</strong></h3>\n<p>在这里给出相应的输出。例如：</p>\n<pre><code>4\n1\n2\n</code></pre>\n<h3 id=\"题目解析-2\"><a class=\"anchor\" href=\"#题目解析-2\">#</a> <strong>题目解析</strong></h3>\n<h3 id=\"方法一朴素匹配\"><a class=\"anchor\" href=\"#方法一朴素匹配\">#</a> <strong>方法一：朴素匹配</strong></h3>\n<p>感觉应该过不了，没有写，刚讲了 kmp，估计用 kmp 才是正解（doge）；</p>\n<h3 id=\"方法二kmp\"><a class=\"anchor\" href=\"#方法二kmp\">#</a> <strong>方法二：KMP</strong></h3>\n<p>本题目我选择了 next 数组的方法。即求前后缀的最大匹配值。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1000001</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> next<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token operator\">++</span>k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            k <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">MinCycle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">int</span> next<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">Next</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">int</span> mclen <span class=\"token operator\">=</span> len <span class=\"token operator\">-</span> next<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">return</span> mclen<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">1000001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">MinCycle</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"第三题交换次数\"><a class=\"anchor\" href=\"#第三题交换次数\">#</a> <strong>第三题：交换次数</strong></h2>\n<p>序列 A 中有 N 个整数。</p>\n<p>求对 A 进行冒泡排序发生的元素交换次数。</p>\n<h3 id=\"输入格式-3\"><a class=\"anchor\" href=\"#输入格式-3\">#</a> <strong>输入格式</strong></h3>\n<p>第一行输入整数 N (2&lt;=N&lt;=10^6). 接下来一行 N 个正整数数 A [i] (1≤i≤N ，A [i]&lt;=10^6)。</p>\n<h3 id=\"输出格式-3\"><a class=\"anchor\" href=\"#输出格式-3\">#</a> <strong>输出格式</strong></h3>\n<p>一行，有一个整数，表示元素交换的次数。</p>\n<h3 id=\"输入样例-3\"><a class=\"anchor\" href=\"#输入样例-3\">#</a> <strong>输入样例</strong></h3>\n<p>在这里给出一组输入。例如：</p>\n<p><strong>in</strong></p>\n<pre><code>4\n2 4 3 1\n</code></pre>\n<h3 id=\"输出样例-3\"><a class=\"anchor\" href=\"#输出样例-3\">#</a> <strong>输出样例</strong></h3>\n<p>在这里给出相应的输出。例如：</p>\n<p><strong>out</strong></p>\n<pre><code>4\n</code></pre>\n<h3 id=\"题目解析-3\"><a class=\"anchor\" href=\"#题目解析-3\">#</a> <strong>题目解析</strong></h3>\n<h3 id=\"方法一树状数组\"><a class=\"anchor\" href=\"#方法一树状数组\">#</a> <strong>方法一：树状数组</strong></h3>\n<p>冒泡排序的交换次数，取决于逆序数的数量，本题目使用树状数组计算逆序数，树状数组和线段树类似，可以实现单点更新单点查询，单点更新区间查询，区间更新单点查询，区间更新区间查询。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">1e6</span> <span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> bit<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        s <span class=\"token operator\">+=</span> bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        i <span class=\"token operator\">-=</span> i <span class=\"token operator\">&amp;</span> <span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>maxn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        i <span class=\"token operator\">+=</span> i <span class=\"token operator\">&amp;</span> <span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        ans <span class=\"token operator\">+=</span> j <span class=\"token operator\">-</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"第四题维护序列\"><a class=\"anchor\" href=\"#第四题维护序列\">#</a> <strong>第四题：维护序列</strong></h2>\n<p>一个序列初始为空。给出 N (N&lt;=1000000) 个操作维护序列。</p>\n<h3 id=\"输入格式-4\"><a class=\"anchor\" href=\"#输入格式-4\">#</a> <strong>输入格式</strong></h3>\n<p>第 1 行 整数 N；然后有 N 行，每行两个数，ch 和 kch=1 表示插入一个值为 k 的数 ch=2 表示查询第 k 小的数（k 合法）ch=3 表示删除值为 k 的数 (k 一定存在)</p>\n<h3 id=\"输出格式-4\"><a class=\"anchor\" href=\"#输出格式-4\">#</a> <strong>输出格式</strong></h3>\n<p>输出查询操作的结果值。每个一行。</p>\n<h3 id=\"输入样例-4\"><a class=\"anchor\" href=\"#输入样例-4\">#</a> <strong>输入样例</strong></h3>\n<p>在这里给出一组输入。例如：</p>\n<p><strong>in</strong></p>\n<pre><code>5\n1 2\n1 3\n2 1\n3 2\n2 1\n</code></pre>\n<h3 id=\"输出样例-4\"><a class=\"anchor\" href=\"#输出样例-4\">#</a> <strong>输出样例</strong></h3>\n<p>在这里给出相应的输出。例如：</p>\n<p><strong>out</strong></p>\n<pre><code>2\n3\n</code></pre>\n<h3 id=\"题目解析-4\"><a class=\"anchor\" href=\"#题目解析-4\">#</a> <strong>题目解析</strong></h3>\n<p>能满足插入值为 k 的数，查询第 k 小的数，删除值为 k 的数的数据结构，限制 1000ms，应该选择高度平衡树。据说还卡 splay，没有写过类似的板子，看到这个题目，简直绝望，用暴力法骗了 20 分，只能下课请教大佬。感谢 mxgg 和 zygg 提供的 treap 的解法和帮我一起 debug，我哭死。</p>\n<p>treap 是树堆，比较容易实现，比较基础，且常数不大。有 BST 的性质，也有 Heap 的性质，可以维护排名，又能保证深度在 logn 级别。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">1e7</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mod <span class=\"token operator\">=</span> <span class=\"token number\">1e7</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> rd<span class=\"token punctuation\">,</span> pl<span class=\"token punctuation\">,</span> pr<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span> tree<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> sz<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">maintain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\ttree<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">[</span>tree<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">+</span> tree<span class=\"token punctuation\">[</span>tree<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">R_rorate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">int</span> ii <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\ttree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pl <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">[</span>ii<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\ttree<span class=\"token punctuation\">[</span>ii<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pr <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\ttree<span class=\"token punctuation\">[</span>ii<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">maintain</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tp <span class=\"token operator\">=</span> ii<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">L_rorate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">int</span> ii <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\ttree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pr <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">[</span>ii<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\ttree<span class=\"token punctuation\">[</span>ii<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pl <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\ttree<span class=\"token punctuation\">[</span>ii<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">maintain</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tp <span class=\"token operator\">=</span> ii<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tp <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>sz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\ttree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\ttree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\ttree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rd <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\ttree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>=</span> tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pr<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pl<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pl <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rd <span class=\"token operator\">></span> tree<span class=\"token punctuation\">[</span>tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token function\">R_rorate</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pr <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rd <span class=\"token operator\">></span> tree<span class=\"token punctuation\">[</span>tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token function\">L_rorate</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token function\">maintain</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\ttree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pl <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pr <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\tp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pl <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pr <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\tp <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pl <span class=\"token operator\">+</span> tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rd <span class=\"token operator\">&lt;</span> tree<span class=\"token punctuation\">[</span>tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t\t<span class=\"token function\">R_rorate</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t\t<span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pr<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t<span class=\"token function\">L_rorate</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\t<span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pl<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">&lt;=</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t<span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pr<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t<span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pl<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token function\">maintain</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">kth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> tree<span class=\"token punctuation\">[</span>tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> tree<span class=\"token punctuation\">[</span>tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">kth</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pr<span class=\"token punctuation\">,</span> x <span class=\"token operator\">-</span> tree<span class=\"token punctuation\">[</span>tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">kth</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pl<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\tios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t<span class=\"token function\">srand</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t<span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">,</span> ch1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ch1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t\t<span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> ch1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">kth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> ch1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t\t<span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> ch1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "编程",
                "数据结构"
            ]
        },
        {
            "id": "http://leomeng86.github.io/2022/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/",
            "url": "http://leomeng86.github.io/2022/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/",
            "title": "数据结构第四次上机实验",
            "date_published": "2022-09-06T04:00:18.000Z",
            "content_html": "<h2 id=\"第一题-图的深度优先搜索i\"><a class=\"anchor\" href=\"#第一题-图的深度优先搜索i\">#</a> <strong>第一题： 图的深度优先搜索 I</strong></h2>\n<p>无向图 G 有 n 个顶点和 m 条边。求图 G 的深度优先搜索树 (森林) 以及每个顶点的发现时间和完成时间。每个连通分量从编号最小的结点开始搜索，邻接顶点选择顺序遵循边的输入顺序。</p>\n<p>在搜索过程中，第一次遇到一个结点，称该结点被发现；一个结点的所有邻接结点都搜索完，该结点的搜索被完成。深度优先搜索维护一个时钟，时钟从 0 开始计数，结点被搜索发现或完成时，时钟计数增 1，然后为当前结点盖上时间戳。一个结点被搜索发现和完成的时间戳分别称为该结点的发现时间和完成时间</p>\n<h3 id=\"输入格式\"><a class=\"anchor\" href=\"#输入格式\">#</a> <strong>输入格式</strong></h3>\n<p>第 1 行，2 个整数 n 和 m，用空格分隔，分别表示顶点数和边数， 1≤n≤50000， 1≤m≤100000.</p>\n<p>第 2 到 m+1 行，每行两个整数 u 和 v，用空格分隔，表示顶点 u 到顶点 v 有一条边，u 和 v 是顶点编号，1≤u,v≤n.</p>\n<h3 id=\"输出格式\"><a class=\"anchor\" href=\"#输出格式\">#</a> <strong>输出格式</strong></h3>\n<p>第 1 到 n 行，每行两个整数 di 和 fi，用空格分隔，表示第 i 个顶点的发现时间和完成时间 1≤i≤n 。</p>\n<p>第 n+1 行，1 个整数 k ，表示图的深度优先搜索树 (森林) 的边数。</p>\n<p>第 n+2 到 n+k+1 行，每行两个整数 u 和 v, 表示深度优先搜索树 (森林) 的一条边 &lt; u,v&gt;，边的输出顺序按 v 结点编号从小到大。</p>\n<h3 id=\"输入样例\"><a class=\"anchor\" href=\"#输入样例\">#</a> <strong>输入样例</strong></h3>\n<p>在这里给出一组输入。例如：</p>\n<p><strong>in</strong></p>\n<pre><code>6 5\n1 3\n1 2\n2 3\n4 5\n5 6\n</code></pre>\n<h3 id=\"输出样例\"><a class=\"anchor\" href=\"#输出样例\">#</a> <strong>输出样例</strong></h3>\n<p>在这里给出相应的输出。例如：</p>\n<p><strong>out</strong></p>\n<pre><code>1 6\n3 4\n2 5\n7 12\n8 11\n9 10\n4\n3 2\n1 3\n4 5\n5 6\n</code></pre>\n<h3 id=\"题目解析\"><a class=\"anchor\" href=\"#题目解析\">#</a> <strong>题目解析</strong></h3>\n<h3 id=\"方法一深度优先遍历\"><a class=\"anchor\" href=\"#方法一深度优先遍历\">#</a> <strong>方法一：深度优先遍历</strong></h3>\n<p>根据题目说的用 DFS，使用一个 timer 来标识时间，然后用数组存每一个节点的进入时间和离开时间。</p>\n<h3 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> <strong>代码实现：</strong></h3>\n<h3 id=\"dfs\"><a class=\"anchor\" href=\"#dfs\">#</a> DFS：</h3>\n<p>每个 DFS 的点要用用 vis 数组标志访问情况，然后用 timer 给 intime 赋值，该节点遍历完成后，再用 timer 给 outtime 赋值。</p>\n<p><strong>cpp</strong></p>\n<pre><code>void dfs(int x)\n&#123;\n    vis[x] = 1;\n    intime[x] = ++timer;\n\n    node *p = phead[x];\n\n    while(p != nullptr)\n    &#123;\n        if(vis[p-&gt;val] != 1)\n        &#123;\n            list.push(edge(x,p-&gt;val));\n            dfs(p-&gt;val);\n        &#125;\n        p = p-&gt;next;\n    &#125;\n\n    outtime[x] = ++timer;\n&#125;\n</code></pre>\n<h3 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码：</h3>\n<p><strong>cpp</strong></p>\n<pre><code>#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;queue&gt;using namespace std;\n\nint timer = 0;\nint intime[50001] = &#123;0&#125;, outtime[50001] = &#123;0&#125;;\nint n, m, v1, v2;\nint vis[50001] = &#123;0&#125;;\n\nclass node\n&#123;\npublic:\n    int val;\n    node *next;\n    node(int _v)\n    &#123;\n        val = _v;\n        next = nullptr;\n    &#125;\n&#125;;\n\nnode *phead[50001] = &#123;nullptr&#125;;\nnode *ptail[50001] = &#123;nullptr&#125;;\n\nclass edge\n&#123;\npublic:\n    int u, v;\n    edge(int u_tmp, int v_tmp) : u(u_tmp), v(v_tmp)&#123;&#125;;\n    bool operator&lt;(const edge &amp;b) const\n    &#123;\n        return v &gt; b.v;\n    &#125;\n&#125;;\n\npriority_queue&lt;edge&gt; list;\n\nvoid add(int &amp;a, int &amp;b)\n&#123;\n    node *t = ptail[a];\n    if (t == nullptr)\n    &#123;\n        phead[v1] = new node(v2);\n        ptail[v1] = phead[v1];\n    &#125;\n    else\n    &#123;\n        ptail[v1]-&gt;next = new node(v2);\n        ptail[v1] = ptail[v1]-&gt;next;\n    &#125;\n\n    t = ptail[v2];\n    if (t == nullptr)\n    &#123;\n        phead[v2] = new node(v1);\n        ptail[v2] = phead[v2];\n    &#125;\n    else\n    &#123;\n        ptail[v2]-&gt;next = new node(v1);\n        ptail[v2] = ptail[v2]-&gt;next;\n    &#125;\n&#125;\n\nvoid dfs(int x)\n&#123;\n    vis[x] = 1;\n    intime[x] = ++timer;\n\n    node *p = phead[x];\n\n    while (p != nullptr)\n    &#123;\n        if (vis[p-&gt;val] != 1)\n        &#123;\n            list.push(edge(x, p-&gt;val));\n            dfs(p-&gt;val);\n        &#125;\n        p = p-&gt;next;\n    &#125;\n\n    outtime[x] = ++timer;\n&#125;\n\nint main()\n&#123;\n    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);\n\n    for (int i = 0; i &lt;= m - 1; i++)\n    &#123;\n        scanf(&quot;%d%d&quot;, &amp;v1, &amp;v2);\n        add(v1, v2);\n    &#125;\n\n    for (int i = 1; i &lt;= n; i++)\n    &#123;\n        if (vis[i] != 1)\n        &#123;\n            dfs(i);\n        &#125;\n    &#125;\n\n    for (int i = 1; i &lt;= n; i++)\n    &#123;\n        printf(&quot;%d %d\\\\n&quot;, intime[i], outtime[i]);\n    &#125;\n    cout &lt;&lt; list.size() &lt;&lt; endl;\n    while (!list.empty())\n    &#123;\n        printf(&quot;%d %d\\\\n&quot;, list.top().u, list.top().v);\n        list.pop();\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"教训\"><a class=\"anchor\" href=\"#教训\">#</a> <strong>教训</strong></h3>\n<p>把各个函数都改了一遍，发现 oj 居然卡 cin 和 cout，不要用 cin 或者 cout 还有 endl，会变得不幸。</p>\n<h2 id=\"第二题数字变换\"><a class=\"anchor\" href=\"#第二题数字变换\">#</a> <strong>第二题：数字变换</strong></h2>\n<p>利用变换规则，一个数可以变换成另一个数。变换规则如下：（1）x 变为 x+1；（2）x 变为 2x；（3）x 变为 x-1。给定两个数 x 和 y，至少经过几步变换能让 x 变换成 y.</p>\n<h3 id=\"输入格式-2\"><a class=\"anchor\" href=\"#输入格式-2\">#</a> <strong>输入格式</strong></h3>\n<p>1 行，2 个整数 x 和 y，用空格分隔， 1≤x,y≤100000.</p>\n<h3 id=\"输出格式-2\"><a class=\"anchor\" href=\"#输出格式-2\">#</a> <strong>输出格式</strong></h3>\n<p>第 1 行，1 个整数 s，表示变换的最小步数。</p>\n<p>第 2 行，s 个数，用空格分隔，表示最少变换时每步变换的结果。规则使用优先级顺序: （1），（2），（3）。</p>\n<h3 id=\"输入样例-2\"><a class=\"anchor\" href=\"#输入样例-2\">#</a> <strong>输入样例</strong></h3>\n<p>在这里给出一组输入。例如</p>\n<p><strong>in</strong></p>\n<pre><code>2 14\n</code></pre>\n<h3 id=\"输出样例-2\"><a class=\"anchor\" href=\"#输出样例-2\">#</a> <strong>输出样例</strong></h3>\n<p>在这里给出相应的输出。例如：</p>\n<p><strong>out</strong></p>\n<pre><code>4\n3 6 7 14\n</code></pre>\n<h3 id=\"题目解析-2\"><a class=\"anchor\" href=\"#题目解析-2\">#</a> <strong>题目解析</strong></h3>\n<p>无权无限图最短路问题，为防止两种不同步骤产生相同答案的重复计算，使用 vis 数组标志已访问变量，答案用 path 数组记录，输出时是逆序，应使用 stack 存储后，正序输出。</p>\n<h3 id=\"方法一广度优先遍历\"><a class=\"anchor\" href=\"#方法一广度优先遍历\">#</a> <strong>方法一：广度优先遍历</strong></h3>\n<h3 id=\"bfs\"><a class=\"anchor\" href=\"#bfs\">#</a> BFS：</h3>\n<p><strong>cpp</strong></p>\n<pre><code>void bfs(int x, int y)\n&#123;\n    queue&lt;int&gt; q;\n    q.push(x);\n    while(!q.empty())\n    &#123;\n        int tmp = q.front();\n        q.pop();\n        if(tmp + 1 &lt;= maxn &amp;&amp; path[tmp+1] == tmp + 1)\n        &#123;\n            q.push(tmp + 1);\n            path[tmp + 1] = tmp;\n            if(tmp + 1 == y) return;\n        &#125;\n        if(tmp * 2 &lt;= maxn &amp;&amp; path[tmp * 2] == tmp * 2)\n        &#123;\n            q.push(tmp *2);\n            path[tmp* 2] = tmp;\n            if(tmp * 2 == y) return;\n        &#125;\n        if(tmp - 1 &gt; 0 &amp;&amp; tmp - 1 &lt;= maxn &amp;&amp; path[tmp -1] == tmp -1)\n        &#123;\n            q.push(tmp - 1);\n            path[tmp - 1] = tmp;\n            if(tmp - 1 == y) return;\n        &#125;\n\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"完整代码-2\"><a class=\"anchor\" href=\"#完整代码-2\">#</a> 完整代码：</h3>\n<p><strong>cpp</strong></p>\n<pre><code>#include&lt;iostream&gt;#include&lt;stack&gt;#include&lt;queue&gt;using namespace std;\n\nconst int maxn = 100010;\nint path[maxn] = &#123;0&#125;;\n\nvoid bfs(int x, int y)\n&#123;\n    queue&lt;int&gt; q;\n    q.push(x);\n    while(!q.empty())\n    &#123;\n        int tmp = q.front();\n        q.pop();\n        if(tmp + 1 &lt;= maxn &amp;&amp; path[tmp+1] == tmp + 1)\n        &#123;\n            q.push(tmp + 1);\n            path[tmp + 1] = tmp;\n            if(tmp + 1 == y) return;\n        &#125;\n        if(tmp * 2 &lt;= maxn &amp;&amp; path[tmp * 2] == tmp * 2)\n        &#123;\n            q.push(tmp *2);\n            path[tmp* 2] = tmp;\n            if(tmp * 2 == y) return;\n        &#125;\n        if(tmp - 1 &gt; 0 &amp;&amp; tmp - 1 &lt;= maxn &amp;&amp; path[tmp -1] == tmp -1)\n        &#123;\n            q.push(tmp - 1);\n            path[tmp - 1] = tmp;\n            if(tmp - 1 == y) return;\n        &#125;\n\n    &#125;\n&#125;\n\nint main()\n&#123;\n    int x, y, cnt = 0;\n    cin &gt;&gt; x &gt;&gt; y;\n\n    for(int i = 0; i &lt;= maxn - 1; i++)\n    &#123;\n        path[i] = i;\n    &#125;\n    bfs(x, y);\n\n    path[x] = x;\n    stack&lt;int&gt; result;\n    while(path[y] != y)\n    &#123;\n        cnt++;\n        result.push(y);\n        y = path[y];\n    &#125;\n\n    cout &lt;&lt; cnt &lt;&lt; endl;\n\n    while(!result.empty())\n    &#123;\n        cout &lt;&lt; result.top();\n        result.pop();\n        if(!result.empty()) cout &lt;&lt; &quot; &quot;;\n    &#125;\n    //cout &lt;&lt; endl;\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"教训-2\"><a class=\"anchor\" href=\"#教训-2\">#</a> <strong>教训</strong></h3>\n<p>结尾输出空行会导致第一个样例因为格式错误过不了。以后 OJ 出现这种异常，可以试试更改一下格式。</p>\n<h2 id=\"第三题修轻轨\"><a class=\"anchor\" href=\"#第三题修轻轨\">#</a> <strong>第三题：修轻轨</strong></h2>\n<p>全屏浏览题目切换布局</p>\n<p>长春市有 n 个交通枢纽，计划在 1 号枢纽到 n 号枢纽之间修建一条轻轨。轻轨由多段隧道组成，候选隧道有 m 段。每段候选隧道只能由一个公司施工，施工天数对各家公司一致。有 n 家施工公司，每家公司同时最多只能修建一条候选隧道。所有公司可以同时开始施工。请评估：修建这条轻轨最少要多少天。</p>\n<h3 id=\"输入格式-3\"><a class=\"anchor\" href=\"#输入格式-3\">#</a> <strong>输入格式</strong></h3>\n<p>第 1 行，两个整数 n 和 m，用空格分隔，分别表示交通枢纽的数量和候选隧道的数量，1 ≤ n ≤ 100000，1 ≤ m ≤ 200000。</p>\n<p>第 2 行到第 m+1 行，每行三个整数 a、b、c，用空格分隔，表示枢纽 a 和枢纽 b 之间可以修建一条双向隧道，施工时间为 c 天，1 ≤ a, b ≤ n，1 ≤ c ≤ 1000000。</p>\n<h3 id=\"输出格式-3\"><a class=\"anchor\" href=\"#输出格式-3\">#</a> <strong>输出格式</strong></h3>\n<p>输出一行，包含一个整数，表示最少施工天数。</p>\n<h3 id=\"输入样例-3\"><a class=\"anchor\" href=\"#输入样例-3\">#</a> <strong>输入样例</strong></h3>\n<p>在这里给出一组输入。例如：</p>\n<p><strong>in</strong></p>\n<pre><code>6 6\n1 2 4\n2 3 4\n3 6 7\n1 4 2\n4 5 5\n5 6 6\n</code></pre>\n<h3 id=\"输出样例-3\"><a class=\"anchor\" href=\"#输出样例-3\">#</a> <strong>输出样例</strong></h3>\n<p>在这里给出相应的输出。例如：</p>\n<p><strong>out</strong></p>\n<pre><code>6\n</code></pre>\n<h3 id=\"题目解析-3\"><a class=\"anchor\" href=\"#题目解析-3\">#</a> <strong>题目解析</strong></h3>\n<p>一共有 n 个枢纽，即使由起点出发，遍历所有枢纽，到达终点，也只需要 n-1 条边，不需要考虑某一家公司需要完成第一条施工后再施工第二条。我们要求的就是从起点到终点的一条路径，使得该路径上的权值最大值最小，这时候就比较容易联想到最小生成树算法 Kruskal，贪心思想，每一次都取最小的边加入并查集。经过推理，发现每次取边之后，判断一下起点和终点在同一集合内，哪怕选取的边最后不会使用，但是这样并不影响完成从起点到终点这一路径过程中的最大值。</p>\n<h3 id=\"方法一kruskal\"><a class=\"anchor\" href=\"#方法一kruskal\">#</a> <strong>方法一：Kruskal</strong></h3>\n<h3 id=\"代码实现-2\"><a class=\"anchor\" href=\"#代码实现-2\">#</a> <strong>代码实现</strong></h3>\n<p><strong>cpp</strong></p>\n<pre><code>#include&lt;iostream&gt;#include&lt;queue&gt;#include&lt;vector&gt;using namespace std;\n\nint pre[100001];\nint cur = 0;\nint n, m, v1, v2, cost_tmp;\n\nint find(int x)\n&#123;\n    if(pre[x] == x) return x;\n    return pre[x] = find(pre[x]);\n&#125;\n\nvoid join(int x, int y)\n&#123;\n    int fx = find(x), fy = find(y);\n    if(fx != fy)\n        pre[fx] = fy;\n&#125;\n\nstruct edge\n&#123;\n    int fr, to;\n    int cost;\n    edge(int _fr, int _to, int _cost):fr(_fr), to(_to), cost(_cost)&#123;&#125;;\n    bool operator &gt;(const edge &amp; b)const\n    &#123;\n        return cost &gt; b.cost;\n    &#125;\n&#125;;\n\npriority_queue&lt;edge,vector&lt;edge&gt;,greater&lt;edge&gt;&gt; list;\n\nint main()\n&#123;\n    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);\n\n    for(int i = 1; i &lt;= n; i++)\n    &#123;\n        pre[i] = i;\n    &#125;\n\n    for(int i = 0; i &lt;= m - 1; i++)\n    &#123;\n        scanf(&quot;%d%d%d&quot;, &amp;v1, &amp;v2, &amp;cost_tmp);\n        edge *tmp = new edge(v1, v2, cost_tmp);\n        list.push(*tmp);\n    &#125;\n\n    while(find(n) != find(1))\n    &#123;\n        if(list.empty()) break;\n        edge Edge = list.top();\n        list.pop();\n        int vex1 = Edge.fr;\n        int vex2 = Edge.to;\n        int cost_cur = Edge.cost;\n        if(find(vex1) != find(vex2))\n        &#123;\n            cur = cost_cur;\n            join(vex1,vex2);\n        &#125;\n    &#125;\n\n    printf(&quot;%d&quot;, cur);\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"第四题发红包\"><a class=\"anchor\" href=\"#第四题发红包\">#</a> <strong>第四题：发红包</strong></h2>\n<p>新年到了，公司要给员工发红包。员工们会比较获得的红包，有些员工会有钱数的要求，例如，c1 的红包钱数要比 c2 的多。每个员工的红包钱数至少要发 888 元，这是一个幸运数字。</p>\n<p>公司想满足所有员工的要求，同时也要花钱最少，请你帮助计算。</p>\n<h3 id=\"输入格式-4\"><a class=\"anchor\" href=\"#输入格式-4\">#</a> <strong>输入格式</strong></h3>\n<p>第 1 行，两个整数 n 和 m (n&lt;=10000,m&lt;=20000)，用空格分隔，分别代表员工数和要求数。</p>\n<p>接下来 m 行，每行两个整数 c1 和 c2，用空格分隔，表示员工 c1 的红包钱数要比 c2 多，员工的编号 1~n 。</p>\n<h3 id=\"输出格式-4\"><a class=\"anchor\" href=\"#输出格式-4\">#</a> <strong>输出格式</strong></h3>\n<p>一个整数，表示公司发的最少钱数。如果公司不能满足所有员工的需求，输出 - 1.</p>\n<h3 id=\"输入样例-4\"><a class=\"anchor\" href=\"#输入样例-4\">#</a> <strong>输入样例</strong></h3>\n<p>在这里给出一组输入。例如：</p>\n<p><strong>in</strong></p>\n<pre><code>2 1\n1 2\n</code></pre>\n<h3 id=\"输出样例-4\"><a class=\"anchor\" href=\"#输出样例-4\">#</a> <strong>输出样例</strong></h3>\n<p>在这里给出相应的输出。例如：</p>\n<p><strong>out</strong></p>\n<pre><code>1777\n</code></pre>\n<h3 id=\"题目解析-4\"><a class=\"anchor\" href=\"#题目解析-4\">#</a> <strong>题目解析</strong></h3>\n<p>基础红包 888 元，钱数要求是整数，则可以视为边权均为 1。</p>\n<p>假设有三个人：</p>\n<p>1:c1 比 c2 多，c2 比 c3 多。则：最少钱数：c1=890, c2=889, c3 = 888;</p>\n<p>2: 出现环：c1 比 c2 多，c2 比 c3 多，c3 比 c1 多。这种情况的出现，会导致该公司不能满足所有员工的需求。</p>\n<p><img data-src=\"https://leomeng86.github.io/2022/05/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/1.jpg\" alt=\"https://leomeng86.github.io/2022/05/18/数据结构第四次上机实验/1.jpg\" /></p>\n<p><strong>picture</strong></p>\n<p>本题目涉及有向，且先后关联，需要判环，应使用 AOV 拓扑排序。</p>\n<h3 id=\"方法一aov拓扑排序\"><a class=\"anchor\" href=\"#方法一aov拓扑排序\">#</a> <strong>方法一：AOV 拓扑排序</strong></h3>\n<h3 id=\"代码实现-3\"><a class=\"anchor\" href=\"#代码实现-3\">#</a> <strong>代码实现</strong></h3>\n<p><strong>cpp</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span><span class=\"token expression\"><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">vertex</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    vertex <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">vertex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">,</span> vertex <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>vertex <span class=\"token operator\">*</span>phead<span class=\"token punctuation\">[</span><span class=\"token number\">10001</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ptail<span class=\"token punctuation\">[</span><span class=\"token number\">10001</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> du<span class=\"token punctuation\">[</span><span class=\"token number\">10001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> plus_cnt<span class=\"token punctuation\">[</span><span class=\"token number\">10001</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    vertex <span class=\"token operator\">*</span>tmp <span class=\"token operator\">=</span> ptail<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        phead<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">vertex</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        ptail<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> phead<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        ptail<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">vertex</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        ptail<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ptail<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    du<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    sum <span class=\"token operator\">=</span> n <span class=\"token operator\">*</span> <span class=\"token number\">888</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        cin <span class=\"token operator\">>></span> v1 <span class=\"token operator\">>></span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>du<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        x <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        vertex <span class=\"token operator\">*</span>tmp <span class=\"token operator\">=</span> phead<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            du<span class=\"token punctuation\">[</span>tmp<span class=\"token operator\">-></span>val<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>du<span class=\"token punctuation\">[</span>tmp<span class=\"token operator\">-></span>val<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>tmp<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>plus_cnt<span class=\"token punctuation\">[</span>tmp<span class=\"token operator\">-></span>val<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> plus_cnt<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                plus_cnt<span class=\"token punctuation\">[</span>tmp<span class=\"token operator\">-></span>val<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> plus_cnt<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            tmp <span class=\"token operator\">=</span> tmp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">!=</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        sum <span class=\"token operator\">+=</span> plus_cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "编程",
                "数据结构"
            ]
        },
        {
            "id": "http://leomeng86.github.io/2022/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/",
            "url": "http://leomeng86.github.io/2022/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/",
            "title": "数据结构第三次上机实验",
            "date_published": "2022-09-06T03:59:53.000Z",
            "content_html": "<h2 id=\"第一题连通分量\"><a class=\"anchor\" href=\"#第一题连通分量\">#</a> <strong>第一题：连通分量</strong></h2>\n<p>无向图 G 有 n 个顶点和 m 条边。求 G 的连通分量的数目。</p>\n<h3 id=\"输入格式\"><a class=\"anchor\" href=\"#输入格式\">#</a> <strong>输入格式：</strong></h3>\n<p>第 1 行，2 个整数 n 和 m，用空格分隔，分别表示顶点数和边数， 1≤n≤50000， 1≤m≤100000.</p>\n<p>第 2 到 m+1 行，每行两个整数 u 和 v，用空格分隔，表示顶点 u 到顶点 v 有一条边，u 和 v 是顶点编号，1≤u,v≤n.</p>\n<h3 id=\"输出格式\"><a class=\"anchor\" href=\"#输出格式\">#</a> <strong>输出格式：</strong></h3>\n<p>1 行，1 个整数，表示所求连通分量的数目。</p>\n<h3 id=\"输入样例\"><a class=\"anchor\" href=\"#输入样例\">#</a> <strong>输入样例：</strong></h3>\n<p>在这里给出一组输入。例如：</p>\n<p><strong>in</strong></p>\n<pre><code>6 5\n1 3\n1 2\n2 3\n4 5\n5 6\n</code></pre>\n<h3 id=\"输入样例-2\"><a class=\"anchor\" href=\"#输入样例-2\">#</a> <strong>输入样例：</strong></h3>\n<p>在这里给出相应的输出。例如：</p>\n<p><strong>out</strong></p>\n<pre><code>2\n</code></pre>\n<h3 id=\"题目解析\"><a class=\"anchor\" href=\"#题目解析\">#</a> <strong>题目解析：</strong></h3>\n<h3 id=\"方法一深度优先遍历\"><a class=\"anchor\" href=\"#方法一深度优先遍历\">#</a> <strong>方法一：深度优先遍历</strong></h3>\n<p>通过对每一个连通分量进行 DFS（深度优先遍历），来遍历这个连通分量的所有节点，使用 vis 数组判断是否位于该节点是否位于原来已经遍历过的连通分量中，使用 cnt 变量来记录分支数量。</p>\n<h3 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> <strong>代码实现</strong></h3>\n<h3 id=\"读入无向图邻接表\"><a class=\"anchor\" href=\"#读入无向图邻接表\">#</a> 读入无向图（邻接表）</h3>\n<p><strong>cpp</strong></p>\n<pre><code>void add(int &amp; a, int &amp; b)\n&#123;\n    node* tmp = phead[a];\n    if(tmp == nullptr)\n    &#123;\n        tmp = new node;\n        tmp-&gt;val = b;\n        phead[a] = tmp;\n        ptail[a] = tmp;\n    &#125;\n    else&#123;\n        tmp = new node;\n        tmp-&gt;val = b;\n        ptail[a]-&gt;next = tmp;\n        ptail[a] = tmp;\n    &#125;\n\n    tmp = phead[b];\n    if(tmp == nullptr)\n    &#123;\n        tmp = new node;\n        tmp-&gt;val = a;\n        phead[b] = tmp;\n        ptail[b] = tmp;\n    &#125;\n    else&#123;\n        tmp = new node;\n        tmp-&gt;val = a;\n        ptail[b]-&gt;next = tmp;\n        ptail[b] = tmp;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"dfs\"><a class=\"anchor\" href=\"#dfs\">#</a> DFS</h3>\n<p><strong>cpp</strong></p>\n<pre><code>void DFS(int x)\n&#123;\n    vis[x] = 1;\n    node* t = phead[x];\n    while(t != nullptr)\n    &#123;\n        if(vis[t-&gt;val] == 0) DFS(t-&gt;val);\n        t = t-&gt;next;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码</h3>\n<p><strong>cpp</strong></p>\n<pre><code>#include &lt;iostream&gt;using namespace std;\nclass node\n&#123;\npublic:\n    int val;\n    node* next;\n    node()&#123;next = nullptr;&#125;\n&#125;;\n\nnode* phead[50001] = &#123;nullptr&#125;;\nnode* ptail[50001] = &#123;nullptr&#125;;\nint vis[50001] = &#123;0&#125;;\n\nint n, m, v1, v2, cnt = 0;\n\nvoid add(int &amp; a, int &amp; b)\n&#123;\n    node* tmp = phead[a];\n    if(tmp == nullptr)\n    &#123;\n        tmp = new node;\n        tmp-&gt;val = b;\n        phead[a] = tmp;\n        ptail[a] = tmp;\n    &#125;\n    else&#123;\n        tmp = new node;\n        tmp-&gt;val = b;\n        ptail[a]-&gt;next = tmp;\n        ptail[a] = tmp;\n    &#125;\n\n    tmp = phead[b];\n    if(tmp == nullptr)\n    &#123;\n        tmp = new node;\n        tmp-&gt;val = a;\n        phead[b] = tmp;\n        ptail[b] = tmp;\n    &#125;\n    else&#123;\n        tmp = new node;\n        tmp-&gt;val = a;\n        ptail[b]-&gt;next = tmp;\n        ptail[b] = tmp;\n    &#125;\n&#125;\n\nvoid DFS(int x)\n&#123;\n    vis[x] = 1;\n    node* t = phead[x];\n    while(t != nullptr)\n    &#123;\n        if(vis[t-&gt;val] == 0) DFS(t-&gt;val);\n        t = t-&gt;next;\n    &#125;\n&#125;\n\nint main()\n&#123;\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i = 0; i &lt;= m - 1; i++)\n    &#123;\n        cin &gt;&gt; v1 &gt;&gt; v2;\n        add(v1, v2);\n    &#125;\n    for(int i = 1; i &lt;= n; i++)\n    &#123;\n        if(vis[i] == 0)\n        &#123;\n            DFS(i);\n            cnt++;\n        &#125;\n    &#125;\n    cout &lt;&lt; cnt &lt;&lt; endl;\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"方法二并查集\"><a class=\"anchor\" href=\"#方法二并查集\">#</a> <strong>方法二：并查集</strong></h3>\n<p>使用 Kruskal 算法，用并查集存储每个节点的祖先，最后统计出不同祖先的个数。</p>\n<p><strong>cpp</strong></p>\n<pre><code>#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;\n\nint cost_sum = 0;\n\nint pre[50001];\n\nint find(int x)\n&#123;\n    if(pre[x] == x) return x;\n    return pre[x] = find(pre[x]);\n&#125;\n\nvoid join(int x, int y)\n&#123;\n    int fx = find(x), fy = find(y);\n    if(fx != fy)\n        pre[fx] = fy;\n&#125;\n\nstruct edge\n&#123;\n    int fr, to;\n&#125;;\n\nqueue&lt;edge&gt; list;\n\nint main()\n&#123;\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n\n    for(int i = 0; i &lt;= n; i++)\n    &#123;\n        pre[i] = i;\n    &#125;\n\n    for(int i = 0 ; i&lt;= m - 1 ; i++)\n    &#123;\n        int tmp_fr, tmp_to;\n        cin &gt;&gt; tmp_fr &gt;&gt; tmp_to;\n        edge *Edge = new edge;\n        Edge-&gt;fr = tmp_fr;\n        Edge-&gt;to = tmp_to;\n        list.push(*Edge);\n    &#125;\n\n    while(!list.empty())\n    &#123;\n        edge Edge = list.front();\n        list.pop();\n        int vex1 = Edge.fr;\n        int vex2 = Edge.to;\n        if(find(vex1) != find(vex2))\n        &#123;\n            join(vex1, vex2);\n        &#125;\n    &#125;\n\n    int cnt = 0;\n    for(int i = 1; i &lt;= n; i++)\n    &#123;\n        if(find(i) == i) cnt++;\n    &#125;\n    cout &lt;&lt; cnt &lt;&lt;endl;\n    return 0;\n&#125;\n\n</code></pre>\n<h2 id=\"第二题整数拆分\"><a class=\"anchor\" href=\"#第二题整数拆分\">#</a> <strong>第二题：整数拆分</strong></h2>\n<p>整数拆分是一个古老又有趣的问题。请给出将正整数 n 拆分成 k 个正整数的所有不重复方案。例如，将 5 拆分成 2 个正整数的不重复方案，有如下 2 组：(1，4) 和 (2，3)。注意 (1，4) 和 (4，1) 被视为同一方案。每种方案按递增序输出，所有方案按方案递增序输出。</p>\n<h3 id=\"输入格式-2\"><a class=\"anchor\" href=\"#输入格式-2\">#</a> <strong>输入格式</strong></h3>\n<p>1 行，2 个整数 n 和 k，用空格分隔， 1≤k≤n≤50.</p>\n<h3 id=\"输出格式-2\"><a class=\"anchor\" href=\"#输出格式-2\">#</a> <strong>输出格式</strong></h3>\n<p>若干行，每行一个拆分方案，方案中的数用空格分隔。最后一行，给出不同拆分方案的总数。</p>\n<h3 id=\"输入样例-3\"><a class=\"anchor\" href=\"#输入样例-3\">#</a> <strong>输入样例</strong></h3>\n<p>在这里给出一组输入。例如：</p>\n<p><strong>in</strong></p>\n<pre><code>5 2\n</code></pre>\n<h3 id=\"输出样例\"><a class=\"anchor\" href=\"#输出样例\">#</a> <strong>输出样例</strong></h3>\n<p>在这里给出相应的输出。例如：</p>\n<p><strong>out</strong></p>\n<pre><code>1 4\n2 3\n2\n</code></pre>\n<h3 id=\"题目解析-2\"><a class=\"anchor\" href=\"#题目解析-2\">#</a> <strong>题目解析</strong></h3>\n<h3 id=\"方法一回溯法\"><a class=\"anchor\" href=\"#方法一回溯法\">#</a> <strong>方法一：回溯法</strong></h3>\n<h3 id=\"代码实现-2\"><a class=\"anchor\" href=\"#代码实现-2\">#</a> <strong>代码实现</strong></h3>\n<p><strong>cpp</strong></p>\n<pre><code>#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;vector&gt;using namespace std;\n\nint n = 0;\nint k = 0;\nint cnt = 0;\n\nvector&lt;int&gt; vec;\n\nint solve(int x, int y, int q, int sum)\n&#123;\n    //如果数字个数达到k个\n    if (y == 0)\n    &#123;\n        //如果sum恰好等于n，输出答案\n        if (sum == n)\n        &#123;\n            ++cnt;\n            for (auto it = vec.begin(); it != vec.end(); ++it)\n            &#123;\n                cout &lt;&lt; *it;\n                if (it != vec.end())\n                    cout &lt;&lt; &quot; &quot;;\n            &#125;\n            cout &lt;&lt; endl;\n            return 0;\n        &#125;\n        else\n        &#123;\n            return 0;\n        &#125;\n    &#125;\n    //重复方案的筛选，将大于等于q，小于等于x/y的每个数递归solve，保证每个组合元素递增\n    for (int i = q; i &lt;= x / y; ++i)\n    &#123;\n        vec.push_back(i);\n        solve(x - i, y - 1, i, sum + i);\n        vec.pop_back();\n    &#125;\n    return 0;\n&#125;\n\nint main()\n&#123;\n    cin &gt;&gt; n &gt;&gt; k;\n    solve(n, k, 1, 0);\n    cout &lt;&lt; cnt;\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"第三题旅行\"><a class=\"anchor\" href=\"#第三题旅行\">#</a> <strong>第三题：旅行</strong></h2>\n<p>五一要到了，来一场说走就走的旅行吧。当然，要关注旅行费用。由于从事计算机专业，你很容易就收集到一些城市之间的交通方式及相关费用。将所有城市编号为 1 到 n，你出发的城市编号是 s。你想知道，到其它城市的最小费用分别是多少。如果可能，你想途中多旅行一些城市，在最小费用情况下，到各个城市的途中最多能经过多少城市。</p>\n<h3 id=\"输入格式-3\"><a class=\"anchor\" href=\"#输入格式-3\">#</a> <strong>输入格式</strong></h3>\n<p>第 1 行，3 个整数 n、m、s，用空格分隔，分别表示城市数、交通方式总数、出发城市编号， 1≤s≤n≤10000, 1≤m≤100000 。</p>\n<p>第 2 到 m+1 行，每行三个整数 u、v 和 w，用空格分隔，表示城市 u 和城市 v 的一种双向交通方式费用为 w ， 1≤w≤10000。</p>\n<h3 id=\"输出格式-3\"><a class=\"anchor\" href=\"#输出格式-3\">#</a> <strong>输出格式</strong></h3>\n<p>第 1 行，若干个整数 Pi，用空格分隔，Pi 表示 s 能到达的城市 i 的最小费用，1≤i≤n，按城市号递增顺序。</p>\n<p>第 2 行，若干个整数 Ci，Ci 表示在最小费用情况下，s 到城市 i 的最多经过的城市数，1≤i≤n，按城市号递增顺序。</p>\n<h3 id=\"输入样例-4\"><a class=\"anchor\" href=\"#输入样例-4\">#</a> <strong>输入样例</strong></h3>\n<p>在这里给出一组输入。例如：</p>\n<p><strong>in</strong></p>\n<pre><code>5 5 1\n1 2 2\n1 4 5\n2 3 4\n3 5 7\n4 5 8\n</code></pre>\n<h3 id=\"输出样例-2\"><a class=\"anchor\" href=\"#输出样例-2\">#</a> <strong>输出样例</strong></h3>\n<p>在这里给出相应的输出。例如：</p>\n<p><strong>out</strong></p>\n<pre><code>0 2 6 5 13\n0 1 2 1 3\n</code></pre>\n<h3 id=\"题目解析-3\"><a class=\"anchor\" href=\"#题目解析-3\">#</a> <strong>题目解析</strong></h3>\n<p>单元最短路问题，首先想到的是 Dijkstra。</p>\n<p>求最多经过的城市数，需要对 “三角形” 进行特判若 “两边之和等于第三边”，选择多经过一个城市的路径。</p>\n<h3 id=\"方法一dijkstra\"><a class=\"anchor\" href=\"#方法一dijkstra\">#</a> <strong>方法一：Dijkstra</strong></h3>\n<h3 id=\"代码实现-3\"><a class=\"anchor\" href=\"#代码实现-3\">#</a> <strong>代码实现</strong></h3>\n<p><strong>cpp</strong></p>\n<pre><code>#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;limit&gt;using namespace std;\n\nclass node\n&#123;\npublic:\n    int val;\n    int cost;\n    node *next;\n    node() &#123; next = nullptr; &#125;\n    node(int v, int c) &#123; val = v, cost = c, next = nullptr; &#125;\n&#125;;\n\nclass edge\n&#123;\npublic:\n    int val;\n    int cost;\n    edge(int c, int v) &#123; val = v, cost = c; &#125;\n    bool operator&lt;(const edge &amp;b) const\n    &#123;\n        return cost &gt; b.cost;\n    &#125;\n&#125;;\n\nnode *phead[10001] = &#123;nullptr&#125;;\nnode *ptail[10001] = &#123;nullptr&#125;;\nint vis[10001] = &#123;0&#125;;\nint citycnt[10001] = &#123;0&#125;;\n\nint n, m, strt, v1, v2, cs;\n\npriority_queue&lt;edge&gt; list;//通过优先队列进行优化\n\nint main()\n&#123;\n    scanf(&quot;%d%d%d&quot;, &amp;n, &amp;m, &amp;strt);\n    int *dist = new int[n + 1];\n    for (int i = 0; i &lt;= m - 1; i++)\n    &#123;\n        scanf(&quot;%d%d%d&quot;, &amp;v1, &amp;v2, &amp;cs);\n        node *t = ptail[v1];\n        if (t == nullptr)\n        &#123;\n            phead[v1] = new node(v2, cs);\n            ptail[v1] = phead[v1];\n        &#125;\n        else\n        &#123;\n            ptail[v1]-&gt;next = new node(v2, cs);\n            ptail[v1] = ptail[v1]-&gt;next;\n        &#125;\n\n        t = ptail[v2];\n        if (t == nullptr)\n        &#123;\n            phead[v2] = new node(v1, cs);\n            ptail[v2] = phead[v2];\n        &#125;\n        else\n        &#123;\n            ptail[v2]-&gt;next = new node(v1, cs);\n            ptail[v2] = ptail[v2]-&gt;next;\n        &#125;\n    &#125;\n    for (int i = 0; i &lt;= n; i++)\n    &#123;\n        dist[i] = INT32_MAX;\n    &#125;\n    dist[strt] = 0;\n    list.push(edge(0, strt));\n    while (!list.empty())\n    &#123;\n        edge cur = list.top();\n        list.pop();\n        if (vis[cur.val] == 1)\n            continue;\n        else\n            vis[cur.val] = 1;\n\n        node *t = phead[cur.val];\n        while (t != nullptr)\n        &#123;\n            if (t-&gt;cost + dist[cur.val] &lt; dist[t-&gt;val])\n            &#123;\n                dist[t-&gt;val] = t-&gt;cost + dist[cur.val];\n                list.push(edge(dist[t-&gt;val], t-&gt;val));\n                citycnt[t-&gt;val] = citycnt[cur.val] + 1;\n            &#125;\n            else if (t-&gt;cost + dist[cur.val] == dist[t-&gt;val])\n            &#123;\n                if (citycnt[t-&gt;val] &lt; citycnt[cur.val] + 1)\n                    citycnt[t-&gt;val] = citycnt[cur.val] + 1;\n            &#125;\n            t = t-&gt;next;\n        &#125;\n    &#125;\n    for (int i = 1; i &lt;= n; i++)\n    &#123;\n        cout &lt;&lt; dist[i];\n        if (i != n)\n            cout &lt;&lt; &quot; &quot;;\n    &#125;\n    cout &lt;&lt; endl;\n    for (int i = 1; i &lt;= n; i++)\n    &#123;\n        cout &lt;&lt; citycnt[i];\n        if (i != n)\n            cout &lt;&lt; &quot; &quot;;\n    &#125;\n    cout &lt;&lt; endl;\n\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"第四题供电\"><a class=\"anchor\" href=\"#第四题供电\">#</a> <strong>第四题：供电</strong></h2>\n<p>给 N 个地区供电。每个地区或者建一个供电站，或者修一条线道连接到其它有电的地区。试确定给 N 个地区都供上电的最小费用。</p>\n<p>要给 N 个地区供电。每个地区或者建一个供电站，或者修一条线道连接到其它有电的地区。试确定给 N 个地区都供上电的最小费用。</p>\n<h3 id=\"输入格式-4\"><a class=\"anchor\" href=\"#输入格式-4\">#</a> <strong>输入格式</strong></h3>\n<p>第 1 行，两个个整数 N 和 M , 用空格分隔，分别表示地区数和修线路的方案数，1≤N≤10000，0≤M≤50000。</p>\n<p>第 2 行，包含 N 个用空格分隔的整数 P [i]，表示在第 i 个地区建一个供电站的代价，1 ≤P [i]≤ 100,000，1≤i≤N 。</p>\n<p>接下来 M 行，每行 3 个整数 a、b 和 c，用空格分隔，表示在地区 a 和 b 之间修一条线路的代价为 c，1 ≤ c ≤ 100,000，1≤a,b≤N 。</p>\n<h3 id=\"输出格式-4\"><a class=\"anchor\" href=\"#输出格式-4\">#</a> <strong>输出格式</strong></h3>\n<p>一行，包含一个整数， 表示所求最小代价。</p>\n<h3 id=\"输入样例-5\"><a class=\"anchor\" href=\"#输入样例-5\">#</a> <strong>输入样例</strong></h3>\n<p>在这里给出一组输入。例如：</p>\n<p><strong>in</strong></p>\n<pre><code>4 6\n5 4 4 3\n1 2 2\n1 3 2\n1 4 2\n2 3 3\n2 4 3\n3 4 4\n</code></pre>\n<h3 id=\"输出样例-3\"><a class=\"anchor\" href=\"#输出样例-3\">#</a> <strong>输出样例</strong></h3>\n<p>在这里给出相应的输出。例如：</p>\n<p><strong>out</strong></p>\n<pre><code>9\n</code></pre>\n<h3 id=\"题目解析-4\"><a class=\"anchor\" href=\"#题目解析-4\">#</a> <strong>题目解析</strong></h3>\n<p>最小生成树问题，但是可以选择自己供电，即本题的图，既有点权，又有边权。可以选择点权化边权，然后使用最小生成树的相关算法完成。</p>\n<h3 id=\"方法一kruskal\"><a class=\"anchor\" href=\"#方法一kruskal\">#</a> <strong>方法一：Kruskal</strong></h3>\n<h3 id=\"代码实现-4\"><a class=\"anchor\" href=\"#代码实现-4\">#</a> <strong>代码实现</strong></h3>\n<p><strong>cpp</strong></p>\n<pre><code>#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;queue&gt;using namespace std;\n\nint cost_sum = 0;\n\nint pre[10001];\n\nint find(int x)\n&#123;\n    if(pre[x] == x) return x;\n    return pre[x] = find(pre[x]);\n&#125;\n\nvoid join(int x, int y)\n&#123;\n    int fx = find(x), fy = find(y);\n    if(fx != fy)\n        pre[fx] = fy;\n&#125;\n\nstruct edge\n&#123;\n    int fr, to;\n    int cost;\n\n    bool operator &gt;(const edge &amp; b)const\n    &#123;\n        return cost &gt; b.cost;\n    &#125;\n&#125;;\n\npriority_queue&lt;edge,vector&lt;edge&gt;,greater&lt;edge&gt;&gt; list;\n\nint main()\n&#123;\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    pre[0] = 0;\n    for(int i = 1; i &lt;= n; i++)\n    &#123;\n        int tmp_cost;\n        cin &gt;&gt; tmp_cost;\n        edge *Edge = new edge;\n        Edge-&gt;fr = 0;\n        Edge-&gt;to = i;\n        Edge-&gt;cost = tmp_cost;\n        list.push(*Edge);\n        pre[i] = i;\n    &#125;\n\n    for(int i = 0 ; i&lt;= m - 1 ; i++)\n    &#123;\n        int tmp_fr, tmp_to, tmp_cost;\n        cin &gt;&gt; tmp_fr &gt;&gt; tmp_to &gt;&gt; tmp_cost;\n        edge *Edge = new edge;\n        Edge-&gt;fr = tmp_fr;\n        Edge-&gt;to = tmp_to;\n        Edge-&gt;cost = tmp_cost;\n        list.push(*Edge);\n    &#125;\n    int T = n + 1;\n    while(T &gt; 1)\n    &#123;\n        edge Edge = list.top();\n        list.pop();\n        int vex1 = Edge.fr;\n        int vex2 = Edge.to;\n        int cost = Edge.cost;\n        if(find(vex1) != find(vex2))\n        &#123;\n            cost_sum += cost;\n            join(vex1, vex2);\n            T--;\n        &#125;\n    &#125;\n    cout &lt;&lt; cost_sum &lt;&lt; endl;\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "编程",
                "数据结构"
            ]
        },
        {
            "id": "http://leomeng86.github.io/2022/09/06/C&C++/CPP%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/",
            "url": "http://leomeng86.github.io/2022/09/06/C&C++/CPP%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/",
            "title": "CPP第一次上机实验",
            "date_published": "2022-09-06T03:51:41.000Z",
            "content_html": "<h2 id=\"题目要求\"><a class=\"anchor\" href=\"#题目要求\">#</a> <strong>题目要求</strong></h2>\n<p>第一个题目要求利用位运算的知识</p>\n<p>并通过位运算的方式完成十进制加减乘法；</p>\n<p>第二个题目要求计算 1000！，结果超过两千位，远超 int 或者 long long 所能储存的值，应使用高精度乘法算法进行计算。</p>\n<h2 id=\"主要流程及解决思路\"><a class=\"anchor\" href=\"#主要流程及解决思路\">#</a> <strong>主要流程及解决思路</strong></h2>\n<p>第一题：位运算共包括六种：与（&amp;）， 或（|）， 非（~），异或（^）， 左移（&lt;&lt;）, 右移（&gt;&gt;）。左移和右移运算可进行快速乘 2，除 2 操作。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubm90aW9uLnNvLzJjZWQ4Njk3MzQzYjRlYmQ4ZDVhOTIyYWIxYzE4Nzll\">Untitled</span></p>\n<p>根据该真值表可以进行位运算等操作。</p>\n<p>计算机通过补码进行运算，即无需考虑加负数的问题。根据上学期的数字逻辑知识，可知完成十进制加法器可以通过异或运算计算本位（异或运算当且仅当 a！=b 时值为 1），可计算出所有本位。再通过与运算计算出进位情况，当且仅当 a == 1 &amp;&amp; b == 1 时值为 1，符合运算进位的需求，此时进位保留在本位，应使用左移运算，完成进位操作，再循环进行进位与异或计算答案的异或，直到进位为 0；</p>\n<p>减法运算，通过补码运算法则，对数据进行取补码运算先取反再加 1，然后进行加法运算。乘法运算需要先判断 a 和 b 的正负，并转为正数，a*b，b 个 a 相加，通过循环，完成 b 个 a 的相加运算，最后进行正负的判断。</p>\n<p>第二题：高精度计算，通过 int 数组，每个 int 存一位数，通过 - 1 指示该位是否使用。</p>\n<p>高精度模拟了竖式计算法，完成按位相加后，需要维护数组的值在 0 到 9 之间。</p>\n<p>为操作方便，数据逆序存储，累乘操作需保存结果且乘数每次循环加 1，完成后逆序输出。</p>\n<h2 id=\"程序难点以及我遇到的问题\"><a class=\"anchor\" href=\"#程序难点以及我遇到的问题\">#</a> <strong>程序难点以及我遇到的问题</strong></h2>\n<p>第一题：之前未曾学习有关位运算实现的相关知识，只有去年学习的数字逻辑电路的知识进行辅助，未了解 C++ 通过补码计算的规则，在进行加法运算时错误认为需要提前判断正负，导致减法运算时没有头绪。仔细完成相关知识学习之后，该问题迎刃而解。</p>\n<p>第二题：高精度加法和乘法的运用。</p>\n<h2 id=\"程序的优缺点\"><a class=\"anchor\" href=\"#程序的优缺点\">#</a> <strong>程序的优缺点</strong></h2>\n<p>第一题：设置了较为合理的操作选项，完成了六种位运算封装并测试和三种十进制运算，使用迭代计算，减少了递归调用的时间损耗，减少堆栈的占用。</p>\n<p>第二题：使用 int 存位，使函数书写变得简洁，使用 - 1 进行标识，方便了数位的判断，但使用 memset () 造成了时间的浪费。采用定长数组，在计算较小数的阶乘时，会造成空间的浪费。使用 int 存位相较于 char 存位，也造成了更大的浪费，若使用 vector 或者是 string 将进一步减少相关浪费。第一版将两个乘数全部使用高精度进行运算，浪费了空间和时间。在第二版中考虑到只有计算阶乘过程中第二个数不会出现爆 int 的情况，把第二个数直接以 int 形式乘到高精度数组中，然后进行数组维护，使程序更为简洁，提高了程序的效率。</p>\n<h2 id=\"我的收获\"><a class=\"anchor\" href=\"#我的收获\">#</a> <strong>我的收获</strong></h2>\n<p>进一步学习了位运算，学习 C/C++ 中接近底层的操作。巩固了高精度算法的运用，在编程过程中可以更多的考虑空间和时间的占用。在 debug 过程中有效利用 IDE 自带调试功能，以及在关键位置输出结果的方式，进行了函数的测试和使用。在 C 语言课程设计过程中学习的相关开发知识，进一步得到夯实，由过程化编程，进一步学习了面向对象的思想，巩固了类封装的相关知识。希望今后可以进一步提升自己编程能力，进一步优化程序。</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> <strong>代码实现</strong></h2>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0xlb01lbmc4Ni9DcHBfZXhwZXJpbWVudC5naXQ=\">https://github.com/LeoMeng86/Cpp_experiment.git</span></strong></p>\n",
            "tags": [
                "编程",
                "CPP"
            ]
        }
    ]
}